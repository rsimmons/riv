!function(Q){var B={};function I(n){if(B[n])return B[n].exports;var F=B[n]={i:n,l:!1,exports:{}};return Q[n].call(F.exports,F,F.exports,I),F.l=!0,F.exports}I.m=Q,I.c=B,I.d=function(Q,B,n){I.o(Q,B)||Object.defineProperty(Q,B,{enumerable:!0,get:n})},I.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},I.t=function(Q,B){if(1&B&&(Q=I(Q)),8&B)return Q;if(4&B&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var n=Object.create(null);if(I.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:Q}),2&B&&"string"!=typeof Q)for(var F in Q)I.d(n,F,function(B){return Q[B]}.bind(null,F));return n},I.n=function(Q){var B=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(B,"a",B),B},I.o=function(Q,B){return Object.prototype.hasOwnProperty.call(Q,B)},I.p="",I(I.s=12)}([function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMachine = exports.useCallbackReducers = exports.useCallbackReducer = exports.useReducers = exports.useReducer = exports.useDynamic = exports.useEventMultiReceiver = exports.useEventReceiver = exports.useEventEmitter = exports.useInitialize = exports.useRequestUpdate = exports.useVar = exports.createNullaryVoidRootExecutionContext = exports.enqueueBatchedUpdate = exports.endBatch = exports.beginBatch = exports.ExecutionContext = void 0;\nvar currentUpdateFrame = null;\n\nvar ExecutionContext =\n/** @class */\nfunction () {\n  function ExecutionContext(streamFunc, onRequestUpdate, afterTerminate) {\n    if (afterTerminate === void 0) {\n      afterTerminate = null;\n    }\n\n    this.streamFunc = streamFunc;\n    this.onRequestUpdate = onRequestUpdate;\n    this.afterTerminate = afterTerminate;\n    this.hookRecordChain = {\n      data: null,\n      cleanup: null,\n      next: null\n    }; // dummy\n\n    this.recordCursor = null; // only set when this context is updating\n\n    this.openRecord = null;\n    this.updateCount = 0;\n  }\n\n  ExecutionContext.prototype.update = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    } // Push a new update frame onto the update stack for this context\n\n\n    var newFrame = {\n      executionContext: this,\n      previousFrame: currentUpdateFrame\n    };\n    currentUpdateFrame = newFrame; // Move hook record cursor to start of chain\n\n    this.recordCursor = this.hookRecordChain;\n    var retval;\n\n    try {\n      retval = this.streamFunc.apply(null, arguments); // This should be null, otherwise there are hook records we didn't get to, and something is amiss\n\n      if (this.recordCursor.next) {\n        throw new Error('Did not reach all hook records in update');\n      }\n    } finally {\n      // Pop the top frame from the update stack\n      var poppedFrame = currentUpdateFrame;\n\n      if (!poppedFrame) {\n        throw new Error('Cannot pop update frame because current is null');\n      }\n\n      if (poppedFrame.executionContext !== this) {\n        throw new Error(\"Popped frame from update stack but context did not match\");\n      }\n\n      currentUpdateFrame = poppedFrame.previousFrame;\n    }\n\n    this.updateCount++;\n    return retval;\n  };\n\n  ExecutionContext.prototype.terminate = function () {\n    // NOTE: Might we want to sanity check that this context isn't anywhere in the current update stack?\n    // Call any cleanup functions set by hooks\n    // TODO: Do we need to worry about order?\n    for (var c = this.hookRecordChain.next; c; c = c.next) {\n      if (c.cleanup) {\n        c.cleanup();\n      }\n    }\n\n    if (this.afterTerminate) {\n      this.afterTerminate();\n    }\n  };\n\n  ExecutionContext.prototype._beginHook = function () {\n    if (this.openRecord) {\n      throw new Error('This is already an open hook when beginning another');\n    }\n\n    if (!this.recordCursor) {\n      throw new Error();\n    }\n\n    if (this.updateCount === 0) {\n      if (this.recordCursor.next) {\n        throw new Error('Expecting to create new hook record in chain, but already present');\n      } // Create new record\n\n\n      this.recordCursor.next = {\n        data: null,\n        cleanup: null,\n        next: null\n      };\n    }\n\n    if (!this.recordCursor.next) {\n      throw new Error('Expecting to find hook record in chain, but not present');\n    }\n\n    this.openRecord = this.recordCursor.next;\n    return this.recordCursor.next;\n  };\n\n  ExecutionContext.prototype._endHook = function () {\n    if (!this.recordCursor) {\n      throw new Error();\n    }\n\n    if (this.openRecord !== this.recordCursor.next) {\n      throw new Error('Hook close does not match open');\n    }\n\n    this.openRecord = null;\n    this.recordCursor = this.recordCursor.next; // move cursor forward\n  };\n\n  ExecutionContext.prototype._requestUpdate = function () {\n    this.onRequestUpdate();\n  };\n  /**\n   * This is only safe to do if the replacement function calls the same hooks, has same signature, etc.\n   * It's currently used to provide a function that is lexically the same but bound to different outer-scope\n   * variables.\n   */\n\n\n  ExecutionContext.prototype._setStreamFunc = function (newStreamFunc) {\n    this.streamFunc = newStreamFunc;\n  };\n\n  return ExecutionContext;\n}();\n\nexports.ExecutionContext = ExecutionContext;\nvar currentBatch = null;\n\nfunction beginBatch() {\n  if (currentBatch) {\n    throw new Error('cannot begin batch when one is already active');\n  }\n\n  currentBatch = {\n    callbacks: new Set()\n  };\n}\n\nexports.beginBatch = beginBatch;\n\nfunction endBatch() {\n  if (!currentBatch) {\n    throw new Error('cannot end batch when none is active');\n  }\n\n  currentBatch.callbacks.forEach(function (cb) {\n    cb();\n  });\n  currentBatch = null;\n}\n\nexports.endBatch = endBatch;\n\nfunction enqueueBatchedUpdate(callback) {\n  if (currentBatch) {\n    currentBatch.callbacks.add(callback);\n  } else {\n    // NOTE: If there is no current batch, we just call the callback immediately\n    callback();\n  }\n}\n\nexports.enqueueBatchedUpdate = enqueueBatchedUpdate;\n\nfunction createNullaryVoidRootExecutionContext(streamFunc) {\n  var updateCount = 0;\n\n  var updateCtx = function () {\n    var t0 = performance.now();\n    ctx.update();\n    var dt = performance.now() - t0;\n    updateCount++;\n    console.log('root update', 'count', updateCount, 'time', dt.toFixed(2) + 'ms');\n  };\n\n  var onRequestUpdate = function () {\n    enqueueBatchedUpdate(updateCtx);\n  };\n\n  var ctx = new ExecutionContext(streamFunc, onRequestUpdate);\n  return ctx;\n}\n\nexports.createNullaryVoidRootExecutionContext = createNullaryVoidRootExecutionContext;\n/**\n * This is used by hooks to get the currently updating context (after verifying it is set)\n */\n\nfunction getTopUpdatingExecutionContext() {\n  if (!currentUpdateFrame) {\n    throw new Error('Cannot get currently updating execution context because update stack is empty. Was a hook called outside of an execution context update?');\n  }\n\n  return currentUpdateFrame.executionContext;\n}\n/**\n * If initVal is a function, it will be called on first update to generate initial value.\n */\n\n\nfunction useVar(initVal) {\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook(); // Create value box if necessary\n\n\n  if (!record.data) {\n    var actualInitVal = initVal instanceof Function ? initVal() : initVal;\n    record.data = {\n      current: actualInitVal\n    };\n  }\n\n  ctx._endHook();\n\n  return record.data;\n}\n\nexports.useVar = useVar;\n/**\n * Why do we need a hook? Why can't we just call ctx.requestUpdate()? Because the requestUpdate\n * function that we return will often be called without there being any updating execution context\n * (e.g. from an event handler). So it has to be bound to the correct context.\n */\n\nfunction useRequestUpdate() {\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook(); // Create callback if necessary. We store it so that we already return the same one.\n\n\n  if (!record.data) {\n    record.data = {\n      requestUpdate: function () {\n        ctx._requestUpdate(); // it's important that we use ctx from closure, not getTopUpdatingExecutionContext() here\n\n      }\n    };\n  }\n\n  ctx._endHook();\n\n  return record.data.requestUpdate;\n}\n\nexports.useRequestUpdate = useRequestUpdate;\n\nfunction useInitialize(initializer) {\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook(); // Initialize if necessary\n\n\n  if (!record.data) {\n    // data being undefined means this is the first call\n    record.cleanup = initializer() || null;\n    record.data = {}; // no data to store yet, just needs to be truthy to indicate that initialization ran\n  }\n\n  ctx._endHook();\n}\n\nexports.useInitialize = useInitialize;\n\nfunction useEventEmitter() {\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    var subscribers_1 = new Set();\n    var stream = {\n      subscribe: function (onValue) {\n        subscribers_1.add(onValue);\n        return function () {\n          subscribers_1.delete(onValue);\n        };\n      }\n    };\n\n    var emit = function (value) {\n      subscribers_1.forEach(function (sub) {\n        sub(value);\n      });\n    };\n\n    record.data = {\n      stream: stream,\n      emit: emit\n    };\n  }\n\n  ctx._endHook();\n\n  return [record.data.stream, record.data.emit];\n}\n\nexports.useEventEmitter = useEventEmitter;\n\nfunction useEventReceiver(stream) {\n  ;\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    var queue_1 = [];\n    var data_1 = {\n      queue: queue_1,\n      lastStream: null,\n      unsubscribe: null,\n      onValue: function (value) {\n        queue_1.push(value);\n      }\n    };\n    record.data = data_1;\n\n    record.cleanup = function () {\n      if (data_1.unsubscribe) {\n        data_1.unsubscribe();\n      }\n    };\n  }\n\n  var retval;\n  var recordData = record.data;\n\n  if (stream !== recordData.lastStream) {\n    // Stream changed identity\n    // I _think_ we want to disallow this, since semantics are unclear\n    if (recordData.queue.length) {\n      throw new Error('useEventReceiver stream changed, but value is in queue');\n    }\n\n    if (recordData.lastStream) {\n      if (!recordData.unsubscribe) {\n        throw new Error('should not be possible');\n      }\n\n      recordData.unsubscribe();\n      recordData.lastStream = null;\n      recordData.unsubscribe = null;\n    } // TODO: We could validate that it's either undefined or null or a valid stream object\n\n\n    recordData.lastStream = stream;\n\n    if (stream) {\n      recordData.unsubscribe = stream.subscribe(recordData.onValue);\n    }\n  } else {\n    // Stream did not change identity. Check if there is an value in the queue\n    if (recordData.queue.length) {\n      if (recordData.queue.length > 1) {\n        throw new Error('useEventReceiver found more than one enqueued value');\n      }\n\n      var eventValue = recordData.queue.pop(); // assertion is OK because we verified length is 1\n\n      retval = {\n        value: eventValue\n      };\n    }\n  }\n\n  ctx._endHook();\n\n  return retval;\n}\n\nexports.useEventReceiver = useEventReceiver;\n\nfunction useEventMultiReceiver(streams) {\n  ;\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    var data_2 = {\n      streamToData: new Map()\n    };\n    record.data = data_2;\n\n    record.cleanup = function () {\n      data_2.streamToData.forEach(function (sd) {\n        sd.unsubscribe();\n      });\n    };\n  }\n\n  var recordData = record.data;\n  var retval = [];\n\n  var _loop_1 = function (stream) {\n    var event_1 = undefined;\n    var sd = recordData.streamToData.get(stream);\n\n    if (sd) {\n      // This is a stream we're already subscribed to, so check for events\n      if (sd.queue.length) {\n        if (sd.queue.length > 1) {\n          throw new Error('useEventMultiReceiver found more than one enqueued value');\n        }\n\n        event_1 = {\n          value: sd.queue.pop()\n        };\n      }\n    } else {\n      // Subscribe to this new stream and add it to our tracking\n      var queue_2 = [];\n\n      var onValue = function (v) {\n        queue_2.push(v);\n      };\n\n      recordData.streamToData.set(stream, {\n        queue: queue_2,\n        unsubscribe: stream.subscribe(onValue)\n      });\n    }\n\n    retval.push(event_1);\n  };\n\n  for (var _i = 0, streams_1 = streams; _i < streams_1.length; _i++) {\n    var stream = streams_1[_i];\n\n    _loop_1(stream);\n  } // Remove/unsub streams that were not passed in argument\n\n\n  var argStreamsSet = new Set(streams);\n  recordData.streamToData.forEach(function (sd, stream) {\n    if (!argStreamsSet.has(stream)) {\n      if (sd.queue.length > 0) {\n        throw new Error('useEventMultiReceiver stream went away, but queue is not empty');\n      }\n\n      sd.unsubscribe();\n      recordData.streamToData.delete(stream);\n    }\n  });\n\n  ctx._endHook();\n\n  return retval;\n}\n\nexports.useEventMultiReceiver = useEventMultiReceiver;\n/**\n * The streamFunc argument may change, but it should only change to a function that can be safely\n * swapped in (i.e. one that calls the same hooks, etc.). A common case is that streamFunc is a\n * closure that references some outer scope variables, and when those change, a new \"version\" of\n * the function is created (lexically the same, but closing over a different scope).\n *\n * onRequestUpdate is currently only read on the first call, so changes to it will have no effect.\n */\n\nfunction useDynamic(streamFunc, onRequestUpdate) {\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook(); // Initialize record data if necessary\n\n\n  if (!record.data) {\n    // If no onRequestUpdate is provided, default to requesting update on the current context\n    var oru_1 = onRequestUpdate || function () {\n      ctx._requestUpdate();\n    };\n\n    var data_3 = {\n      // Track ExecutionContexts created (and not yet terminated) so we can terminate them upon cleanup\n      activeContexts: new Set(),\n      // Create \"factory\" function to instantiate new contexts\n      createContext: function () {\n        var ctx = new ExecutionContext(data_3.streamFunc, oru_1, function () {\n          data_3.activeContexts.delete(ctx);\n        });\n        data_3.activeContexts.add(ctx);\n        return ctx;\n      },\n      streamFunc: function () {\n        throw new Error('should be unreachable');\n      } // initialize with dummy to satisfy TS, gets set properly below\n\n    };\n    record.data = data_3;\n\n    record.cleanup = function () {\n      data_3.activeContexts.forEach(function (ctx) {\n        return ctx.terminate();\n      });\n    };\n  } // Update the stream function in record and all active contexts.\n\n\n  record.data.streamFunc = streamFunc;\n  record.data.activeContexts.forEach(function (ctx) {\n    ctx._setStreamFunc(streamFunc);\n  });\n\n  ctx._endHook();\n\n  return record.data.createContext;\n}\n\nexports.useDynamic = useDynamic;\n/**\n * NOTE: reducerFunc should be pure-pointwise, NOT a stream func\n * If initialState is a function, it will be called on first update to generate initial state.\n */\n\nfunction useReducer(evts, reducerFunc, initialState) {\n  var state = useVar(initialState);\n  var evt = useEventReceiver(evts);\n\n  if (evt) {\n    state.current = reducerFunc(state.current, evt.value);\n  }\n\n  return state.current;\n}\n\nexports.useReducer = useReducer;\n/**\n * NOTE: streamReducerPairs must not change length.\n */\n\nfunction useReducers(streamReducerPairs, initialState) {\n  var state = useVar(initialState);\n  var numStreams = useVar(streamReducerPairs.length);\n\n  if (streamReducerPairs.length !== numStreams.current) {\n    // NOTE: We could allow this with some extra work\n    throw new Error('The number of streams/reducers supplied to useMultiReducer cannot change');\n  } // It's safe to call hook in this loop because we made sure that the length is the same\n\n\n  var evtCount = 0;\n\n  for (var _i = 0, streamReducerPairs_1 = streamReducerPairs; _i < streamReducerPairs_1.length; _i++) {\n    var _a = streamReducerPairs_1[_i],\n        evts = _a[0],\n        reducer = _a[1];\n    var evt = useEventReceiver(evts);\n\n    if (evt) {\n      if (evtCount > 0) {\n        // TODO: We _could_ handle these sequentially.. should we have a flag that says whether to allow or not?\n        throw new Error('useMultiReducer got multiple events, cannot merge');\n      }\n\n      state.current = reducer(state.current, evt.value);\n      evtCount++;\n    }\n  }\n\n  return state.current;\n}\n\nexports.useReducers = useReducers;\n/**\n * NOTE: reducerFunc should be pure-pointwise, NOT a stream func\n * If initialState is a function, it will be called on first update to generate initial state.\n */\n\nfunction useCallbackReducer(reducerFunc, initialState) {\n  var requestUpdate = useRequestUpdate();\n  var state = useVar(initialState); // We cache the callback, though I don't think we really need to?\n\n  var callback = useVar(function () {\n    return function (action) {\n      state.current = reducerFunc(state.current, action);\n      requestUpdate();\n    };\n  });\n  return [state.current, callback.current];\n}\n\nexports.useCallbackReducer = useCallbackReducer;\n\nfunction useCallbackReducers(reducerFuncs, initialState) {\n  var requestUpdate = useRequestUpdate();\n  var state = useVar(initialState);\n  var callbacks = reducerFuncs.map(function (reducerFunc) {\n    return function (action) {\n      state.current = reducerFunc(state.current, action);\n      requestUpdate();\n    };\n  });\n  return [state.current, callbacks];\n}\n\nexports.useCallbackReducers = useCallbackReducers;\n/**\n * TODO: Could/should this take an optional onRequestUpdate parameter?\n */\n\nfunction useMachine(states, initialTransition) {\n  var ctx = getTopUpdatingExecutionContext();\n\n  var record = ctx._beginHook();\n\n  var takeTransition = function (trans) {\n    // If there's an old context, terminate it\n    if (record.data.activeContext) {\n      record.data.activeContext.terminate();\n    }\n\n    var newState = trans[0],\n        newStateArg = trans[1]; // Create a new context and store it in record (but don't update it)\n\n    var newCtx = new ExecutionContext(states[newState], function () {\n      ctx._requestUpdate();\n    });\n    record.data.activeState = newState;\n    record.data.activeContext = newCtx;\n    record.data.activeArgument = newStateArg;\n  };\n\n  if (!record.data) {\n    var data_4 = {\n      activeContext: null\n    };\n    record.data = data_4;\n    takeTransition(initialTransition); // this will set stuff in record.data\n\n    record.cleanup = function () {\n      if (!data_4.activeContext) {\n        throw new Error('should have been initialized');\n      }\n\n      data_4.activeContext.terminate();\n    };\n  }\n\n  var retval;\n\n  while (true) {\n    // Set the state function in the active context (in case it changed)\n    record.data.activeContext._setStreamFunc(states[record.data.activeState]); // Update the active context\n\n\n    var _a = record.data.activeContext.update(record.data.activeArgument),\n        tmpRetval = _a[0],\n        transition = _a[1];\n\n    retval = tmpRetval; // Did the state function return a transition to take?\n\n    if (transition) {\n      takeTransition(transition); // And loop again\n    } else {\n      // There was no transition\n      break;\n    }\n  }\n\n  ctx._endHook();\n\n  return retval;\n}\n\nexports.useMachine = useMachine;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return h; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderDOMIntoElement", function() { return renderDOMIntoElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderDOMIntoSelector", function() { return renderDOMIntoSelector; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "renderDOMAppendedToBody", function() { return renderDOMAppendedToBody; });\n/* harmony import */ var riv_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var riv_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(riv_runtime__WEBPACK_IMPORTED_MODULE_0__);\n\n\nconst snabbdom = __webpack_require__(11);\n\nconst patch = snabbdom.init([__webpack_require__(3).default, __webpack_require__(4).default, __webpack_require__(5).default, __webpack_require__(6).default]);\nconst h = __webpack_require__(7).default; // helper function for creating vnodes\n\nfunction cloneNode(vnode) {\n  return {\n    sel: vnode.sel,\n    data: vnode.data,\n    children: vnode.children && vnode.children.map(cloneNode),\n    text: vnode.text,\n    key: vnode.key,\n    elm: vnode.elm // I think this should be unset in our usage, since we only clone before passing to patch\n\n  };\n}\n/**\n * Note that element is only read upon init\n */\n\n\nfunction renderDOMIntoElement(vnode, containerElement) {\n  const savedContainerElement = Object(riv_runtime__WEBPACK_IMPORTED_MODULE_0__["useVar"])();\n  const previousVnode = Object(riv_runtime__WEBPACK_IMPORTED_MODULE_0__["useVar"])();\n  Object(riv_runtime__WEBPACK_IMPORTED_MODULE_0__["useInitialize"])(() => {\n    return () => {\n      // cleanup\n      if (savedContainerElement.current) {\n        savedContainerElement.current.innerHTML = \'\'; // I think we want to do this\n      }\n    };\n  });\n\n  if (!containerElement || !vnode) {\n    return;\n  }\n\n  savedContainerElement.current = containerElement; // It\'s important that we clone the incoming vnode, because snabbdom will mutate it when we\n  // pass it to patch.\n\n  const clonedVnode = cloneNode(vnode);\n\n  if (previousVnode.current) {\n    patch(previousVnode.current, clonedVnode);\n  } else {\n    // First patch\n    // Insert a dummy element because snabbdom replaces it (rather than inserting under)\n    const elem = document.createElement(\'div\');\n    savedContainerElement.current.appendChild(elem);\n    patch(elem, clonedVnode);\n  }\n\n  previousVnode.current = clonedVnode;\n} // selector may change, but once a valid one is passed, further changes will be ignored\n\nfunction renderDOMIntoSelector(vnode, containerSelector) {\n  let containerElement;\n\n  try {\n    containerElement = document.querySelector(containerSelector);\n  } catch (e) {// ignore\n  }\n\n  renderDOMIntoElement(vnode, containerElement);\n}\nfunction renderDOMAppendedToBody(vnode) {\n  const savedContainerElement = Object(riv_runtime__WEBPACK_IMPORTED_MODULE_0__["useVar"])();\n  Object(riv_runtime__WEBPACK_IMPORTED_MODULE_0__["useInitialize"])(() => {\n    const containerElement = document.createElement(\'div\');\n    document.body.appendChild(containerElement);\n    savedContainerElement.current = containerElement;\n    return () => {\n      // cleanup\n      document.body.removeChild(containerElement);\n    };\n  });\n  renderDOMIntoElement(vnode, savedContainerElement.current);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi4vcml2LXNuYWJiZG9tL3NyYy9pbmRleC5qcz8zYTNkIl0sIm5hbWVzIjpbInNuYWJiZG9tIiwicmVxdWlyZSIsInBhdGNoIiwiaW5pdCIsImRlZmF1bHQiLCJoIiwiY2xvbmVOb2RlIiwidm5vZGUiLCJzZWwiLCJkYXRhIiwiY2hpbGRyZW4iLCJtYXAiLCJ0ZXh0Iiwia2V5IiwiZWxtIiwicmVuZGVyRE9NSW50b0VsZW1lbnQiLCJjb250YWluZXJFbGVtZW50Iiwic2F2ZWRDb250YWluZXJFbGVtZW50IiwidXNlVmFyIiwicHJldmlvdXNWbm9kZSIsInVzZUluaXRpYWxpemUiLCJjdXJyZW50IiwiaW5uZXJIVE1MIiwiY2xvbmVkVm5vZGUiLCJlbGVtIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYXBwZW5kQ2hpbGQiLCJyZW5kZXJET01JbnRvU2VsZWN0b3IiLCJjb250YWluZXJTZWxlY3RvciIsInF1ZXJ5U2VsZWN0b3IiLCJlIiwicmVuZGVyRE9NQXBwZW5kZWRUb0JvZHkiLCJib2R5IiwicmVtb3ZlQ2hpbGQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7O0FBQ0EsTUFBTUEsUUFBUSxHQUFHQyxtQkFBTyxDQUFDLEVBQUQsQ0FBeEI7O0FBQ0EsTUFBTUMsS0FBSyxHQUFHRixRQUFRLENBQUNHLElBQVQsQ0FBYyxDQUMxQkYsbUJBQU8sQ0FBQyxDQUFELENBQVAsQ0FBa0NHLE9BRFIsRUFFMUJILG1CQUFPLENBQUMsQ0FBRCxDQUFQLENBQXVDRyxPQUZiLEVBRzFCSCxtQkFBTyxDQUFDLENBQUQsQ0FBUCxDQUFrQ0csT0FIUixFQUkxQkgsbUJBQU8sQ0FBQyxDQUFELENBQVAsQ0FBMkNHLE9BSmpCLENBQWQsQ0FBZDtBQU1PLE1BQU1DLENBQUMsR0FBR0osbUJBQU8sQ0FBQyxDQUFELENBQVAsQ0FBc0JHLE9BQWhDLEMsQ0FBeUM7O0FBRWhELFNBQVNFLFNBQVQsQ0FBbUJDLEtBQW5CLEVBQTBCO0FBQ3hCLFNBQU87QUFDTEMsT0FBRyxFQUFFRCxLQUFLLENBQUNDLEdBRE47QUFFTEMsUUFBSSxFQUFFRixLQUFLLENBQUNFLElBRlA7QUFHTEMsWUFBUSxFQUFFSCxLQUFLLENBQUNHLFFBQU4sSUFBa0JILEtBQUssQ0FBQ0csUUFBTixDQUFlQyxHQUFmLENBQW1CTCxTQUFuQixDQUh2QjtBQUlMTSxRQUFJLEVBQUVMLEtBQUssQ0FBQ0ssSUFKUDtBQUtMQyxPQUFHLEVBQUVOLEtBQUssQ0FBQ00sR0FMTjtBQU1MQyxPQUFHLEVBQUVQLEtBQUssQ0FBQ08sR0FOTixDQU1XOztBQU5YLEdBQVA7QUFRRDtBQUVEO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0Msb0JBQVQsQ0FBOEJSLEtBQTlCLEVBQXFDUyxnQkFBckMsRUFBdUQ7QUFDNUQsUUFBTUMscUJBQXFCLEdBQUdDLDBEQUFNLEVBQXBDO0FBQ0EsUUFBTUMsYUFBYSxHQUFHRCwwREFBTSxFQUE1QjtBQUVBRSxtRUFBYSxDQUFDLE1BQU07QUFDbEIsV0FBTyxNQUFNO0FBQUU7QUFDYixVQUFJSCxxQkFBcUIsQ0FBQ0ksT0FBMUIsRUFBbUM7QUFDakNKLDZCQUFxQixDQUFDSSxPQUF0QixDQUE4QkMsU0FBOUIsR0FBMEMsRUFBMUMsQ0FEaUMsQ0FDYTtBQUMvQztBQUNGLEtBSkQ7QUFLRCxHQU5ZLENBQWI7O0FBUUEsTUFBSSxDQUFDTixnQkFBRCxJQUFxQixDQUFDVCxLQUExQixFQUFpQztBQUMvQjtBQUNEOztBQUVEVSx1QkFBcUIsQ0FBQ0ksT0FBdEIsR0FBZ0NMLGdCQUFoQyxDQWhCNEQsQ0FrQjVEO0FBQ0E7O0FBQ0EsUUFBTU8sV0FBVyxHQUFHakIsU0FBUyxDQUFDQyxLQUFELENBQTdCOztBQUVBLE1BQUlZLGFBQWEsQ0FBQ0UsT0FBbEIsRUFBMkI7QUFDekJuQixTQUFLLENBQUNpQixhQUFhLENBQUNFLE9BQWYsRUFBd0JFLFdBQXhCLENBQUw7QUFDRCxHQUZELE1BRU87QUFDTDtBQUVBO0FBQ0EsVUFBTUMsSUFBSSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsS0FBdkIsQ0FBYjtBQUNBVCx5QkFBcUIsQ0FBQ0ksT0FBdEIsQ0FBOEJNLFdBQTlCLENBQTBDSCxJQUExQztBQUVBdEIsU0FBSyxDQUFDc0IsSUFBRCxFQUFPRCxXQUFQLENBQUw7QUFDRDs7QUFDREosZUFBYSxDQUFDRSxPQUFkLEdBQXdCRSxXQUF4QjtBQUNELEMsQ0FFRDs7QUFDTyxTQUFTSyxxQkFBVCxDQUErQnJCLEtBQS9CLEVBQXNDc0IsaUJBQXRDLEVBQXlEO0FBQzlELE1BQUliLGdCQUFKOztBQUNBLE1BQUk7QUFDRkEsb0JBQWdCLEdBQUdTLFFBQVEsQ0FBQ0ssYUFBVCxDQUF1QkQsaUJBQXZCLENBQW5CO0FBQ0QsR0FGRCxDQUVFLE9BQU9FLENBQVAsRUFBVSxDQUNWO0FBQ0Q7O0FBQ0RoQixzQkFBb0IsQ0FBQ1IsS0FBRCxFQUFRUyxnQkFBUixDQUFwQjtBQUNEO0FBRU0sU0FBU2dCLHVCQUFULENBQWlDekIsS0FBakMsRUFBd0M7QUFDN0MsUUFBTVUscUJBQXFCLEdBQUdDLDBEQUFNLEVBQXBDO0FBRUFFLG1FQUFhLENBQUMsTUFBTTtBQUNsQixVQUFNSixnQkFBZ0IsR0FBR1MsUUFBUSxDQUFDQyxhQUFULENBQXVCLEtBQXZCLENBQXpCO0FBQ0FELFlBQVEsQ0FBQ1EsSUFBVCxDQUFjTixXQUFkLENBQTBCWCxnQkFBMUI7QUFDQUMseUJBQXFCLENBQUNJLE9BQXRCLEdBQWdDTCxnQkFBaEM7QUFFQSxXQUFPLE1BQU07QUFBRTtBQUNiUyxjQUFRLENBQUNRLElBQVQsQ0FBY0MsV0FBZCxDQUEwQmxCLGdCQUExQjtBQUNELEtBRkQ7QUFHRCxHQVJZLENBQWI7QUFVQUQsc0JBQW9CLENBQUNSLEtBQUQsRUFBUVUscUJBQXFCLENBQUNJLE9BQTlCLENBQXBCO0FBQ0QiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVZhciwgdXNlSW5pdGlhbGl6ZSB9IGZyb20gJ3Jpdi1ydW50aW1lJztcbmNvbnN0IHNuYWJiZG9tID0gcmVxdWlyZSgnc25hYmJkb20nKTtcbmNvbnN0IHBhdGNoID0gc25hYmJkb20uaW5pdChbXG4gIHJlcXVpcmUoJ3NuYWJiZG9tL21vZHVsZXMvY2xhc3MnKS5kZWZhdWx0LFxuICByZXF1aXJlKCdzbmFiYmRvbS9tb2R1bGVzL2F0dHJpYnV0ZXMnKS5kZWZhdWx0LFxuICByZXF1aXJlKCdzbmFiYmRvbS9tb2R1bGVzL3N0eWxlJykuZGVmYXVsdCxcbiAgcmVxdWlyZSgnc25hYmJkb20vbW9kdWxlcy9ldmVudGxpc3RlbmVycycpLmRlZmF1bHQsXG5dKTtcbmV4cG9ydCBjb25zdCBoID0gcmVxdWlyZSgnc25hYmJkb20vaCcpLmRlZmF1bHQ7IC8vIGhlbHBlciBmdW5jdGlvbiBmb3IgY3JlYXRpbmcgdm5vZGVzXG5cbmZ1bmN0aW9uIGNsb25lTm9kZSh2bm9kZSkge1xuICByZXR1cm4ge1xuICAgIHNlbDogdm5vZGUuc2VsLFxuICAgIGRhdGE6IHZub2RlLmRhdGEsXG4gICAgY2hpbGRyZW46IHZub2RlLmNoaWxkcmVuICYmIHZub2RlLmNoaWxkcmVuLm1hcChjbG9uZU5vZGUpLFxuICAgIHRleHQ6IHZub2RlLnRleHQsXG4gICAga2V5OiB2bm9kZS5rZXksXG4gICAgZWxtOiB2bm9kZS5lbG0sIC8vIEkgdGhpbmsgdGhpcyBzaG91bGQgYmUgdW5zZXQgaW4gb3VyIHVzYWdlLCBzaW5jZSB3ZSBvbmx5IGNsb25lIGJlZm9yZSBwYXNzaW5nIHRvIHBhdGNoXG4gIH1cbn1cblxuLyoqXG4gKiBOb3RlIHRoYXQgZWxlbWVudCBpcyBvbmx5IHJlYWQgdXBvbiBpbml0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJET01JbnRvRWxlbWVudCh2bm9kZSwgY29udGFpbmVyRWxlbWVudCkge1xuICBjb25zdCBzYXZlZENvbnRhaW5lckVsZW1lbnQgPSB1c2VWYXIoKTtcbiAgY29uc3QgcHJldmlvdXNWbm9kZSA9IHVzZVZhcigpO1xuXG4gIHVzZUluaXRpYWxpemUoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiB7IC8vIGNsZWFudXBcbiAgICAgIGlmIChzYXZlZENvbnRhaW5lckVsZW1lbnQuY3VycmVudCkge1xuICAgICAgICBzYXZlZENvbnRhaW5lckVsZW1lbnQuY3VycmVudC5pbm5lckhUTUwgPSAnJzsgLy8gSSB0aGluayB3ZSB3YW50IHRvIGRvIHRoaXNcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcblxuICBpZiAoIWNvbnRhaW5lckVsZW1lbnQgfHwgIXZub2RlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgc2F2ZWRDb250YWluZXJFbGVtZW50LmN1cnJlbnQgPSBjb250YWluZXJFbGVtZW50O1xuXG4gIC8vIEl0J3MgaW1wb3J0YW50IHRoYXQgd2UgY2xvbmUgdGhlIGluY29taW5nIHZub2RlLCBiZWNhdXNlIHNuYWJiZG9tIHdpbGwgbXV0YXRlIGl0IHdoZW4gd2VcbiAgLy8gcGFzcyBpdCB0byBwYXRjaC5cbiAgY29uc3QgY2xvbmVkVm5vZGUgPSBjbG9uZU5vZGUodm5vZGUpO1xuXG4gIGlmIChwcmV2aW91c1Zub2RlLmN1cnJlbnQpIHtcbiAgICBwYXRjaChwcmV2aW91c1Zub2RlLmN1cnJlbnQsIGNsb25lZFZub2RlKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGaXJzdCBwYXRjaFxuXG4gICAgLy8gSW5zZXJ0IGEgZHVtbXkgZWxlbWVudCBiZWNhdXNlIHNuYWJiZG9tIHJlcGxhY2VzIGl0IChyYXRoZXIgdGhhbiBpbnNlcnRpbmcgdW5kZXIpXG4gICAgY29uc3QgZWxlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgIHNhdmVkQ29udGFpbmVyRWxlbWVudC5jdXJyZW50LmFwcGVuZENoaWxkKGVsZW0pO1xuXG4gICAgcGF0Y2goZWxlbSwgY2xvbmVkVm5vZGUpO1xuICB9XG4gIHByZXZpb3VzVm5vZGUuY3VycmVudCA9IGNsb25lZFZub2RlO1xufVxuXG4vLyBzZWxlY3RvciBtYXkgY2hhbmdlLCBidXQgb25jZSBhIHZhbGlkIG9uZSBpcyBwYXNzZWQsIGZ1cnRoZXIgY2hhbmdlcyB3aWxsIGJlIGlnbm9yZWRcbmV4cG9ydCBmdW5jdGlvbiByZW5kZXJET01JbnRvU2VsZWN0b3Iodm5vZGUsIGNvbnRhaW5lclNlbGVjdG9yKSB7XG4gIGxldCBjb250YWluZXJFbGVtZW50O1xuICB0cnkge1xuICAgIGNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lclNlbGVjdG9yKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIGlnbm9yZVxuICB9XG4gIHJlbmRlckRPTUludG9FbGVtZW50KHZub2RlLCBjb250YWluZXJFbGVtZW50KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlckRPTUFwcGVuZGVkVG9Cb2R5KHZub2RlKSB7XG4gIGNvbnN0IHNhdmVkQ29udGFpbmVyRWxlbWVudCA9IHVzZVZhcigpO1xuXG4gIHVzZUluaXRpYWxpemUoKCkgPT4ge1xuICAgIGNvbnN0IGNvbnRhaW5lckVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGNvbnRhaW5lckVsZW1lbnQpO1xuICAgIHNhdmVkQ29udGFpbmVyRWxlbWVudC5jdXJyZW50ID0gY29udGFpbmVyRWxlbWVudDtcblxuICAgIHJldHVybiAoKSA9PiB7IC8vIGNsZWFudXBcbiAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoY29udGFpbmVyRWxlbWVudCk7XG4gICAgfVxuICB9KTtcblxuICByZW5kZXJET01JbnRvRWxlbWVudCh2bm9kZSwgc2F2ZWRDb250YWluZXJFbGVtZW50LmN1cnJlbnQpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///1\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"showString\", function() { return showString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"animationFrameEvts\", function() { return animationFrameEvts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"latestValue\", function() { return latestValue; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"animationTime\", function() { return animationTime; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"countEvents\", function() { return countEvents; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mouseClickEvts\", function() { return mouseClickEvts; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mouseDown\", function() { return mouseDown; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mousePosition\", function() { return mousePosition; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"random\", function() { return random; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"audioDriver\", function() { return audioDriver; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sampleUpon\", function() { return sampleUpon; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"everySecond\", function() { return everySecond; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"loadAudioAsArray\", function() { return loadAudioAsArray; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"integral\", function() { return integral; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"expFollow\", function() { return expFollow; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"redCircle\", function() { return redCircle; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"followAtSpeed2d\", function() { return followAtSpeed2d; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eventAfter\", function() { return eventAfter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"received\", function() { return received; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"streamMap\", function() { return streamMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"changeCount\", function() { return changeCount; });\nconst {\n  useVar,\n  useRequestUpdate,\n  useInitialize,\n  useEventEmitter,\n  useEventReceiver,\n  useDynamic,\n  useReducer,\n  useReducers\n} = __webpack_require__(0);\n\nconst {\n  renderDOMAppendedToBody,\n  h\n} = __webpack_require__(1);\n\nfunction showString(v) {\n  const vnode = h('div', {\n    style: {\n      border: '1px solid red',\n      color: 'black',\n      fontSize: '24px',\n      padding: '5px',\n      marginTop: '20px'\n    }\n  }, 'showString: ' + (v === undefined ? '(undefined)' : v.toString()));\n  renderDOMAppendedToBody(vnode);\n}\nfunction animationFrameEvts() {\n  const requestUpdate = useRequestUpdate();\n  const reqId = useVar();\n  const [frameEvts, emitFrame] = useEventEmitter();\n  useInitialize(() => {\n    const onFrame = t => {\n      emitFrame(0.001 * t);\n      requestUpdate();\n      reqId.current = requestAnimationFrame(onFrame); // request another\n    };\n\n    reqId.current = requestAnimationFrame(onFrame);\n    return () => {\n      // cleanup\n      cancelAnimationFrame(reqId.current);\n    };\n  });\n  return frameEvts;\n}\nfunction latestValue(evts, initialValue) {\n  return useReducer(evts, (_, value) => value, initialValue);\n}\n\nfunction mapEvts(inputEvts) {\n  const inputEvt = useEventReceiver(inputEvts);\n  const [outputEvts, emitOutput] = useEventEmitter();\n\n  if (inputEvt) {\n    emitOutput(inputEvt.value);\n  } // TODO: We don't need to request update since we are already being updated\n\n\n  return outputEvts;\n}\n\nfunction mergeEvts(streams) {\n  const [outputEvts, emitOutput] = useEventEmitter(); // TODO: This is a hack that assumes array length never changes\n\n  const evts = [...streams].map(stream => useEventReceiver(stream)).filter(e => e);\n\n  if (evts.length > 1) {\n    throw new Error('Failed to merge events since more than one present');\n  } else if (evts.length === 1) {\n    emitOutput(evts[0].value);\n  }\n\n  return outputEvts;\n}\n\nfunction animationTime() {\n  return latestValue(animationFrameEvts(), () => 0.001 * performance.now());\n}\nfunction countEvents(evts) {\n  return useReducer(evts, previousCount => previousCount + 1, 0);\n}\n\nfunction makeAsyncCallback() {\n  const [evts, emit] = useEventEmitter();\n  const requestUpdate = useRequestUpdate();\n\n  const callback = (...args) => {\n    emit(args);\n    requestUpdate();\n  };\n\n  return [callback, evts];\n}\n\nfunction domEvts(eventTarget, type, extra) {\n  // TODO: We should cache type/extra\n  const requestUpdate = useRequestUpdate();\n  const [evts, emit] = useEventEmitter();\n  useInitialize(() => {\n    const onEvent = e => {\n      emit(e);\n      requestUpdate();\n    };\n\n    document.addEventListener(type, onEvent, extra);\n    return () => {\n      // cleanup\n      document.removeEventListener(type, onEvent, extra);\n    };\n  });\n  return evts;\n}\n\nfunction mouseClickEvts() {\n  return domEvts(document, 'mousedown');\n}\nfunction mouseDown() {\n  const downEvts = domEvts(document, 'mousedown');\n  const upEvts = domEvts(document, 'mouseup');\n  return useReducers([[upEvts, () => false], [downEvts, () => true]], false); // We can't poll down-ness, so we assume it's initially not down\n}\nfunction mousePosition() {\n  return latestValue(mapEvts(domEvts(document, 'mousemove'), e => ({\n    x: e.clientX || e.pageX,\n    y: e.clientY || e.pageY\n  })), {\n    x: 0,\n    y: 0\n  });\n}\nfunction random(repickEvts) {\n  return useReducer(repickEvts, () => Math.random(), () => Math.random());\n}\nfunction audioDriver(generator) {\n  const createGenerator = useDynamic(generator);\n  const generatorCtx = useVar();\n  const frameCount = useVar(0);\n  const sampleRate = useVar();\n  const [advanceFrameEvts, emitAdvanceFrameEvt] = useEventEmitter();\n  useInitialize(() => {\n    generatorCtx.current = createGenerator();\n    const BUFFER_SIZE = 1024;\n    const audioContext = new (window.AudioContext || window.webkitAudioContext)();\n    const scriptNode = audioContext.createScriptProcessor(BUFFER_SIZE, 0, 1); // 0 input channels, 1 output channel\n\n    scriptNode.onaudioprocess = e => {\n      const buffer = e.outputBuffer.getChannelData(0);\n\n      for (let i = 0; i < buffer.length; i++) {\n        emitAdvanceFrameEvt();\n        let frameVal = generatorCtx.current.update(frameCount.current / sampleRate.current, advanceFrameEvts, sampleRate.current);\n\n        if (!frameVal || Number.isNaN(frameVal)) {\n          frameVal = 0;\n        } else if (frameVal > 1) {\n          frameVal = 1;\n        } else if (frameVal < -1) {\n          frameVal = -1;\n        }\n\n        buffer[i] = frameVal;\n        frameCount.current++;\n      }\n    };\n\n    scriptNode.connect(audioContext.destination);\n    sampleRate.current = audioContext.sampleRate;\n    return () => {\n      scriptNode.disconnect();\n      audioContext.close();\n    };\n  });\n  /**\n   * Most of our generator updating will happen in the audio processing callback above.\n   * This update here is for when the audioDriver update is called, e.g. when an outer scope\n   * reference that the generator depends on has changed. So we must update the generator,\n   * but don't need its output amplitude.\n   */\n\n  generatorCtx.current.update(frameCount.current / sampleRate.current, advanceFrameEvts, sampleRate.current); // NOTE: we discard retval\n}\nfunction sampleUpon(toSample, uponEvts, initialValue) {\n  return useReducer(uponEvts, () => toSample, initialValue);\n}\nfunction everySecond() {\n  const requestUpdate = useRequestUpdate();\n  const [tickEvts, emitTick] = useEventEmitter();\n  useInitialize(() => {\n    const onInterval = () => {\n      emitTick();\n      requestUpdate();\n    };\n\n    const timerId = setInterval(onInterval, 1000);\n    return () => {\n      // cleanup\n      clearInterval(timerId);\n    };\n  });\n  return tickEvts;\n}\n/**\n * Until audio is loaded and decoded, a single-sample buffer of silence is returned.\n */\n\nfunction loadAudioAsArray(url) {\n  const requestUpdate = useRequestUpdate();\n  const pcm = useVar([0]); // until loaded, just return single sample of silence\n\n  useInitialize(() => {\n    const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\n    let cleanedUp = false;\n    const request = new XMLHttpRequest();\n    request.open('GET', url, true);\n    request.responseType = 'arraybuffer';\n\n    request.onload = () => {\n      const audioData = request.response;\n      audioCtx.decodeAudioData(audioData, buffer => {\n        if (!cleanedUp) {\n          pcm.current = buffer.getChannelData(0);\n          requestUpdate();\n        }\n      });\n    };\n\n    request.send();\n    return () => {\n      // cleanup\n      request.abort(); // it's safe to always abort here. if already completed, it will be ignored\n      // decodeAudioData cannot be canceled. So to be correct, we must set a flag here to make sure\n      // that decoding is ignored\n\n      cleanedUp = true;\n    };\n  });\n  return pcm.current;\n}\n\nfunction consoleLog(v) {\n  console.log(v);\n}\n\nfunction integral(integrandFunc, time, initialValue = 0) {\n  const accum = useVar(initialValue);\n  const prevTime = useVar(time);\n  const integrand = integrandFunc(accum.current, prevTime.current);\n  accum.current += (time - prevTime.current) * integrand;\n  prevTime.current = time;\n  return accum.current;\n}\nfunction expFollow(targetValue, speedConstant, time, initialValue) {\n  return integral(currentValue => speedConstant * (targetValue - currentValue), time, initialValue);\n}\nfunction redCircle(position, radius = 25) {\n  const p = position || {\n    x: 0,\n    y: 0\n  };\n\n  if (radius < 0) {\n    radius = 0;\n  }\n\n  const halfRadius = 0.5 * radius;\n  const vnode = h('div', {\n    style: {\n      position: 'absolute',\n      borderRadius: '50%',\n      background: 'red',\n      pointerEvents: 'none',\n      userSelect: 'none',\n      left: p.x - halfRadius + 'px',\n      top: p.y - halfRadius + 'px',\n      width: radius + 'px',\n      height: radius + 'px'\n    }\n  });\n  renderDOMAppendedToBody(vnode);\n}\nfunction followAtSpeed2d(target, speed, time, initial) {\n  const pos = useVar(initial);\n  const prevTime = useVar(time);\n  const dt = time - prevTime.current;\n  const delta = {\n    x: target.x - pos.current.x,\n    y: target.y - pos.current.y\n  };\n  const dist = Math.sqrt(delta.x * delta.x + delta.y * delta.y);\n\n  if (speed * dt >= dist) {\n    // Jump to target position\n    pos.current = target;\n  } else {\n    // NOTE: We must not mutate pos.current, since we return that\n    pos.current = {\n      x: pos.current.x + dt * speed * delta.x / dist,\n      y: pos.current.y + dt * speed * delta.y / dist\n    };\n  }\n\n  prevTime.current = time;\n  return pos.current;\n}\n/**\n * Note that this _will_ fire in first call if condition starts truthy\n */\n\nfunction eventWhen(condition, valueToEmit) {\n  const prevCondition = useVar(false);\n  const bcond = !!condition;\n  const retval = bcond && !prevCondition.current ? {\n    value: valueToEmit\n  } : undefined;\n  prevCondition.current = bcond;\n  return retval;\n}\n/**\n * Note that seconds argument is only read initially. But valueToEmit is re-read on changes\n */\n\n\nfunction eventAfter(seconds, valueToEmit) {\n  const [evts, emit] = useEventEmitter();\n  const value = useVar(valueToEmit);\n  value.current = valueToEmit;\n  useInitialize(() => {\n    const timerId = setTimeout(() => {\n      emit(value.current);\n    }, 1000 * seconds);\n    return () => {\n      clearTimeout(timerId);\n    };\n  });\n  return evts;\n}\nfunction received(evts) {\n  return useReducer(evts, (previousState, event) => true, false);\n}\n/**\n * F is a stream function that must stay hook-equivalent.\n */\n\nfunction streamMap(f, arr = []) {\n  const createFContext = useDynamic(f);\n  const fContexts = useVar([]); // Create or destrooy contexts as needed to match arr length\n\n  while (arr.length > fContexts.current.length) {\n    fContexts.current.push(createFContext());\n  }\n\n  while (arr.length < fContexts.current.length) {\n    const ctx = fContexts.current.pop();\n    ctx.terminate();\n  }\n\n  const outs = fContexts.current.map((ctx, i) => ctx.update(arr[i]));\n  return outs;\n}\nfunction changeCount(s) {\n  const count = useVar(0);\n  const previous = useVar(s);\n\n  if (!Object.is(s, previous.current)) {\n    count.current++;\n  }\n\n  previous.current = s;\n  return count.current;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction updateClass(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldClass = oldVnode.data.class, klass = vnode.data.class;\n    if (!oldClass && !klass)\n        return;\n    if (oldClass === klass)\n        return;\n    oldClass = oldClass || {};\n    klass = klass || {};\n    for (name in oldClass) {\n        if (!klass[name]) {\n            elm.classList.remove(name);\n        }\n    }\n    for (name in klass) {\n        cur = klass[name];\n        if (cur !== oldClass[name]) {\n            elm.classList[cur ? 'add' : 'remove'](name);\n        }\n    }\n}\nexports.classModule = { create: updateClass, update: updateClass };\nexports.default = exports.classModule;\n//# sourceMappingURL=class.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3J1c3MvcHJvai9yaXYvbm9kZV9tb2R1bGVzL3NuYWJiZG9tL21vZHVsZXMvY2xhc3MuanM/ZmRjZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiB1cGRhdGVDbGFzcyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgY3VyLCBuYW1lLCBlbG0gPSB2bm9kZS5lbG0sIG9sZENsYXNzID0gb2xkVm5vZGUuZGF0YS5jbGFzcywga2xhc3MgPSB2bm9kZS5kYXRhLmNsYXNzO1xuICAgIGlmICghb2xkQ2xhc3MgJiYgIWtsYXNzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZENsYXNzID09PSBrbGFzcylcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZENsYXNzID0gb2xkQ2xhc3MgfHwge307XG4gICAga2xhc3MgPSBrbGFzcyB8fCB7fTtcbiAgICBmb3IgKG5hbWUgaW4gb2xkQ2xhc3MpIHtcbiAgICAgICAgaWYgKCFrbGFzc1tuYW1lXSkge1xuICAgICAgICAgICAgZWxtLmNsYXNzTGlzdC5yZW1vdmUobmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChuYW1lIGluIGtsYXNzKSB7XG4gICAgICAgIGN1ciA9IGtsYXNzW25hbWVdO1xuICAgICAgICBpZiAoY3VyICE9PSBvbGRDbGFzc1tuYW1lXSkge1xuICAgICAgICAgICAgZWxtLmNsYXNzTGlzdFtjdXIgPyAnYWRkJyA6ICdyZW1vdmUnXShuYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuY2xhc3NNb2R1bGUgPSB7IGNyZWF0ZTogdXBkYXRlQ2xhc3MsIHVwZGF0ZTogdXBkYXRlQ2xhc3MgfTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuY2xhc3NNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGFzcy5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xmlNS = 'http://www.w3.org/XML/1998/namespace';\nvar colonChar = 58;\nvar xChar = 120;\nfunction updateAttrs(oldVnode, vnode) {\n    var key, elm = vnode.elm, oldAttrs = oldVnode.data.attrs, attrs = vnode.data.attrs;\n    if (!oldAttrs && !attrs)\n        return;\n    if (oldAttrs === attrs)\n        return;\n    oldAttrs = oldAttrs || {};\n    attrs = attrs || {};\n    // update modified attributes, add new attributes\n    for (key in attrs) {\n        var cur = attrs[key];\n        var old = oldAttrs[key];\n        if (old !== cur) {\n            if (cur === true) {\n                elm.setAttribute(key, \"\");\n            }\n            else if (cur === false) {\n                elm.removeAttribute(key);\n            }\n            else {\n                if (key.charCodeAt(0) !== xChar) {\n                    elm.setAttribute(key, cur);\n                }\n                else if (key.charCodeAt(3) === colonChar) {\n                    // Assume xml namespace\n                    elm.setAttributeNS(xmlNS, key, cur);\n                }\n                else if (key.charCodeAt(5) === colonChar) {\n                    // Assume xlink namespace\n                    elm.setAttributeNS(xlinkNS, key, cur);\n                }\n                else {\n                    elm.setAttribute(key, cur);\n                }\n            }\n        }\n    }\n    // remove removed attributes\n    // use `in` operator since the previous `for` iteration uses it (.i.e. add even attributes with undefined value)\n    // the other option is to remove all attributes with value == undefined\n    for (key in oldAttrs) {\n        if (!(key in attrs)) {\n            elm.removeAttribute(key);\n        }\n    }\n}\nexports.attributesModule = { create: updateAttrs, update: updateAttrs };\nexports.default = exports.attributesModule;\n//# sourceMappingURL=attributes.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3J1c3MvcHJvai9yaXYvbm9kZV9tb2R1bGVzL3NuYWJiZG9tL21vZHVsZXMvYXR0cmlidXRlcy5qcz9mYzY5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQThDLGNBQWM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbnZhciB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xudmFyIHhtbE5TID0gJ2h0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZSc7XG52YXIgY29sb25DaGFyID0gNTg7XG52YXIgeENoYXIgPSAxMjA7XG5mdW5jdGlvbiB1cGRhdGVBdHRycyhvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIga2V5LCBlbG0gPSB2bm9kZS5lbG0sIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycywgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzO1xuICAgIGlmICghb2xkQXR0cnMgJiYgIWF0dHJzKVxuICAgICAgICByZXR1cm47XG4gICAgaWYgKG9sZEF0dHJzID09PSBhdHRycylcbiAgICAgICAgcmV0dXJuO1xuICAgIG9sZEF0dHJzID0gb2xkQXR0cnMgfHwge307XG4gICAgYXR0cnMgPSBhdHRycyB8fCB7fTtcbiAgICAvLyB1cGRhdGUgbW9kaWZpZWQgYXR0cmlidXRlcywgYWRkIG5ldyBhdHRyaWJ1dGVzXG4gICAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICAgICAgdmFyIGN1ciA9IGF0dHJzW2tleV07XG4gICAgICAgIHZhciBvbGQgPSBvbGRBdHRyc1trZXldO1xuICAgICAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgICAgICAgIGlmIChjdXIgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlKGtleSwgXCJcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChjdXIgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKGtleS5jaGFyQ29kZUF0KDApICE9PSB4Q2hhcikge1xuICAgICAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlKGtleSwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5LmNoYXJDb2RlQXQoMykgPT09IGNvbG9uQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3N1bWUgeG1sIG5hbWVzcGFjZVxuICAgICAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlTlMoeG1sTlMsIGtleSwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoa2V5LmNoYXJDb2RlQXQoNSkgPT09IGNvbG9uQ2hhcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBBc3N1bWUgeGxpbmsgbmFtZXNwYWNlXG4gICAgICAgICAgICAgICAgICAgIGVsbS5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIGN1cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBlbG0uc2V0QXR0cmlidXRlKGtleSwgY3VyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlbW92ZWQgYXR0cmlidXRlc1xuICAgIC8vIHVzZSBgaW5gIG9wZXJhdG9yIHNpbmNlIHRoZSBwcmV2aW91cyBgZm9yYCBpdGVyYXRpb24gdXNlcyBpdCAoLmkuZS4gYWRkIGV2ZW4gYXR0cmlidXRlcyB3aXRoIHVuZGVmaW5lZCB2YWx1ZSlcbiAgICAvLyB0aGUgb3RoZXIgb3B0aW9uIGlzIHRvIHJlbW92ZSBhbGwgYXR0cmlidXRlcyB3aXRoIHZhbHVlID09IHVuZGVmaW5lZFxuICAgIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgICAgIGlmICghKGtleSBpbiBhdHRycykpIHtcbiAgICAgICAgICAgIGVsbS5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuYXR0cmlidXRlc01vZHVsZSA9IHsgY3JlYXRlOiB1cGRhdGVBdHRycywgdXBkYXRlOiB1cGRhdGVBdHRycyB9O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5hdHRyaWJ1dGVzTW9kdWxlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXR0cmlidXRlcy5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\n// Bindig `requestAnimationFrame` like this fixes a bug in IE/Edge. See #360 and #409.\nvar raf = (typeof window !== 'undefined' && (window.requestAnimationFrame).bind(window)) || setTimeout;\nvar nextFrame = function (fn) { raf(function () { raf(fn); }); };\nvar reflowForced = false;\nfunction setNextFrame(obj, prop, val) {\n    nextFrame(function () { obj[prop] = val; });\n}\nfunction updateStyle(oldVnode, vnode) {\n    var cur, name, elm = vnode.elm, oldStyle = oldVnode.data.style, style = vnode.data.style;\n    if (!oldStyle && !style)\n        return;\n    if (oldStyle === style)\n        return;\n    oldStyle = oldStyle || {};\n    style = style || {};\n    var oldHasDel = 'delayed' in oldStyle;\n    for (name in oldStyle) {\n        if (!style[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.removeProperty(name);\n            }\n            else {\n                elm.style[name] = '';\n            }\n        }\n    }\n    for (name in style) {\n        cur = style[name];\n        if (name === 'delayed' && style.delayed) {\n            for (var name2 in style.delayed) {\n                cur = style.delayed[name2];\n                if (!oldHasDel || cur !== oldStyle.delayed[name2]) {\n                    setNextFrame(elm.style, name2, cur);\n                }\n            }\n        }\n        else if (name !== 'remove' && cur !== oldStyle[name]) {\n            if (name[0] === '-' && name[1] === '-') {\n                elm.style.setProperty(name, cur);\n            }\n            else {\n                elm.style[name] = cur;\n            }\n        }\n    }\n}\nfunction applyDestroyStyle(vnode) {\n    var style, name, elm = vnode.elm, s = vnode.data.style;\n    if (!s || !(style = s.destroy))\n        return;\n    for (name in style) {\n        elm.style[name] = style[name];\n    }\n}\nfunction applyRemoveStyle(vnode, rm) {\n    var s = vnode.data.style;\n    if (!s || !s.remove) {\n        rm();\n        return;\n    }\n    if (!reflowForced) {\n        vnode.elm.offsetLeft;\n        reflowForced = true;\n    }\n    var name, elm = vnode.elm, i = 0, compStyle, style = s.remove, amount = 0, applied = [];\n    for (name in style) {\n        applied.push(name);\n        elm.style[name] = style[name];\n    }\n    compStyle = getComputedStyle(elm);\n    var props = compStyle['transition-property'].split(', ');\n    for (; i < props.length; ++i) {\n        if (applied.indexOf(props[i]) !== -1)\n            amount++;\n    }\n    elm.addEventListener('transitionend', function (ev) {\n        if (ev.target === elm)\n            --amount;\n        if (amount === 0)\n            rm();\n    });\n}\nfunction forceReflow() {\n    reflowForced = false;\n}\nexports.styleModule = {\n    pre: forceReflow,\n    create: updateStyle,\n    update: updateStyle,\n    destroy: applyDestroyStyle,\n    remove: applyRemoveStyle\n};\nexports.default = exports.styleModule;\n//# sourceMappingURL=style.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3J1c3MvcHJvai9yaXYvbm9kZV9tb2R1bGVzL3NuYWJiZG9tL21vZHVsZXMvc3R5bGUuanM/YjE1YyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQSwrQkFBK0Isa0JBQWtCLFNBQVMsRUFBRSxFQUFFO0FBQzlEO0FBQ0E7QUFDQSwyQkFBMkIsaUJBQWlCLEVBQUU7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsa0JBQWtCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuLy8gQmluZGlnIGByZXF1ZXN0QW5pbWF0aW9uRnJhbWVgIGxpa2UgdGhpcyBmaXhlcyBhIGJ1ZyBpbiBJRS9FZGdlLiBTZWUgIzM2MCBhbmQgIzQwOS5cbnZhciByYWYgPSAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgKHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUpLmJpbmQod2luZG93KSkgfHwgc2V0VGltZW91dDtcbnZhciBuZXh0RnJhbWUgPSBmdW5jdGlvbiAoZm4pIHsgcmFmKGZ1bmN0aW9uICgpIHsgcmFmKGZuKTsgfSk7IH07XG52YXIgcmVmbG93Rm9yY2VkID0gZmFsc2U7XG5mdW5jdGlvbiBzZXROZXh0RnJhbWUob2JqLCBwcm9wLCB2YWwpIHtcbiAgICBuZXh0RnJhbWUoZnVuY3Rpb24gKCkgeyBvYmpbcHJvcF0gPSB2YWw7IH0pO1xufVxuZnVuY3Rpb24gdXBkYXRlU3R5bGUob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIGN1ciwgbmFtZSwgZWxtID0gdm5vZGUuZWxtLCBvbGRTdHlsZSA9IG9sZFZub2RlLmRhdGEuc3R5bGUsIHN0eWxlID0gdm5vZGUuZGF0YS5zdHlsZTtcbiAgICBpZiAoIW9sZFN0eWxlICYmICFzdHlsZSlcbiAgICAgICAgcmV0dXJuO1xuICAgIGlmIChvbGRTdHlsZSA9PT0gc3R5bGUpXG4gICAgICAgIHJldHVybjtcbiAgICBvbGRTdHlsZSA9IG9sZFN0eWxlIHx8IHt9O1xuICAgIHN0eWxlID0gc3R5bGUgfHwge307XG4gICAgdmFyIG9sZEhhc0RlbCA9ICdkZWxheWVkJyBpbiBvbGRTdHlsZTtcbiAgICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICAgICAgaWYgKCFzdHlsZVtuYW1lXSkge1xuICAgICAgICAgICAgaWYgKG5hbWVbMF0gPT09ICctJyAmJiBuYW1lWzFdID09PSAnLScpIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGUucmVtb3ZlUHJvcGVydHkobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgY3VyID0gc3R5bGVbbmFtZV07XG4gICAgICAgIGlmIChuYW1lID09PSAnZGVsYXllZCcgJiYgc3R5bGUuZGVsYXllZCkge1xuICAgICAgICAgICAgZm9yICh2YXIgbmFtZTIgaW4gc3R5bGUuZGVsYXllZCkge1xuICAgICAgICAgICAgICAgIGN1ciA9IHN0eWxlLmRlbGF5ZWRbbmFtZTJdO1xuICAgICAgICAgICAgICAgIGlmICghb2xkSGFzRGVsIHx8IGN1ciAhPT0gb2xkU3R5bGUuZGVsYXllZFtuYW1lMl0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0TmV4dEZyYW1lKGVsbS5zdHlsZSwgbmFtZTIsIGN1cik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5hbWUgIT09ICdyZW1vdmUnICYmIGN1ciAhPT0gb2xkU3R5bGVbbmFtZV0pIHtcbiAgICAgICAgICAgIGlmIChuYW1lWzBdID09PSAnLScgJiYgbmFtZVsxXSA9PT0gJy0nKSB7XG4gICAgICAgICAgICAgICAgZWxtLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIGN1cik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBlbG0uc3R5bGVbbmFtZV0gPSBjdXI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5mdW5jdGlvbiBhcHBseURlc3Ryb3lTdHlsZSh2bm9kZSkge1xuICAgIHZhciBzdHlsZSwgbmFtZSwgZWxtID0gdm5vZGUuZWxtLCBzID0gdm5vZGUuZGF0YS5zdHlsZTtcbiAgICBpZiAoIXMgfHwgIShzdHlsZSA9IHMuZGVzdHJveSkpXG4gICAgICAgIHJldHVybjtcbiAgICBmb3IgKG5hbWUgaW4gc3R5bGUpIHtcbiAgICAgICAgZWxtLnN0eWxlW25hbWVdID0gc3R5bGVbbmFtZV07XG4gICAgfVxufVxuZnVuY3Rpb24gYXBwbHlSZW1vdmVTdHlsZSh2bm9kZSwgcm0pIHtcbiAgICB2YXIgcyA9IHZub2RlLmRhdGEuc3R5bGU7XG4gICAgaWYgKCFzIHx8ICFzLnJlbW92ZSkge1xuICAgICAgICBybSgpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICghcmVmbG93Rm9yY2VkKSB7XG4gICAgICAgIHZub2RlLmVsbS5vZmZzZXRMZWZ0O1xuICAgICAgICByZWZsb3dGb3JjZWQgPSB0cnVlO1xuICAgIH1cbiAgICB2YXIgbmFtZSwgZWxtID0gdm5vZGUuZWxtLCBpID0gMCwgY29tcFN0eWxlLCBzdHlsZSA9IHMucmVtb3ZlLCBhbW91bnQgPSAwLCBhcHBsaWVkID0gW107XG4gICAgZm9yIChuYW1lIGluIHN0eWxlKSB7XG4gICAgICAgIGFwcGxpZWQucHVzaChuYW1lKTtcbiAgICAgICAgZWxtLnN0eWxlW25hbWVdID0gc3R5bGVbbmFtZV07XG4gICAgfVxuICAgIGNvbXBTdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWxtKTtcbiAgICB2YXIgcHJvcHMgPSBjb21wU3R5bGVbJ3RyYW5zaXRpb24tcHJvcGVydHknXS5zcGxpdCgnLCAnKTtcbiAgICBmb3IgKDsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGlmIChhcHBsaWVkLmluZGV4T2YocHJvcHNbaV0pICE9PSAtMSlcbiAgICAgICAgICAgIGFtb3VudCsrO1xuICAgIH1cbiAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsIGZ1bmN0aW9uIChldikge1xuICAgICAgICBpZiAoZXYudGFyZ2V0ID09PSBlbG0pXG4gICAgICAgICAgICAtLWFtb3VudDtcbiAgICAgICAgaWYgKGFtb3VudCA9PT0gMClcbiAgICAgICAgICAgIHJtKCk7XG4gICAgfSk7XG59XG5mdW5jdGlvbiBmb3JjZVJlZmxvdygpIHtcbiAgICByZWZsb3dGb3JjZWQgPSBmYWxzZTtcbn1cbmV4cG9ydHMuc3R5bGVNb2R1bGUgPSB7XG4gICAgcHJlOiBmb3JjZVJlZmxvdyxcbiAgICBjcmVhdGU6IHVwZGF0ZVN0eWxlLFxuICAgIHVwZGF0ZTogdXBkYXRlU3R5bGUsXG4gICAgZGVzdHJveTogYXBwbHlEZXN0cm95U3R5bGUsXG4gICAgcmVtb3ZlOiBhcHBseVJlbW92ZVN0eWxlXG59O1xuZXhwb3J0cy5kZWZhdWx0ID0gZXhwb3J0cy5zdHlsZU1vZHVsZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0eWxlLmpzLm1hcCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction invokeHandler(handler, vnode, event) {\n    if (typeof handler === "function") {\n        // call function handler\n        handler.call(vnode, event, vnode);\n    }\n    else if (typeof handler === "object") {\n        // call handler with arguments\n        if (typeof handler[0] === "function") {\n            // special case for single argument for performance\n            if (handler.length === 2) {\n                handler[0].call(vnode, handler[1], event, vnode);\n            }\n            else {\n                var args = handler.slice(1);\n                args.push(event);\n                args.push(vnode);\n                handler[0].apply(vnode, args);\n            }\n        }\n        else {\n            // call multiple handlers\n            for (var i = 0; i < handler.length; i++) {\n                invokeHandler(handler[i], vnode, event);\n            }\n        }\n    }\n}\nfunction handleEvent(event, vnode) {\n    var name = event.type, on = vnode.data.on;\n    // call event handler(s) if exists\n    if (on && on[name]) {\n        invokeHandler(on[name], vnode, event);\n    }\n}\nfunction createListener() {\n    return function handler(event) {\n        handleEvent(event, handler.vnode);\n    };\n}\nfunction updateEventListeners(oldVnode, vnode) {\n    var oldOn = oldVnode.data.on, oldListener = oldVnode.listener, oldElm = oldVnode.elm, on = vnode && vnode.data.on, elm = (vnode && vnode.elm), name;\n    // optimization for reused immutable handlers\n    if (oldOn === on) {\n        return;\n    }\n    // remove existing listeners which no longer used\n    if (oldOn && oldListener) {\n        // if element changed or deleted we remove all existing listeners unconditionally\n        if (!on) {\n            for (name in oldOn) {\n                // remove listener if element was changed or existing listeners removed\n                oldElm.removeEventListener(name, oldListener, false);\n            }\n        }\n        else {\n            for (name in oldOn) {\n                // remove listener if existing listener removed\n                if (!on[name]) {\n                    oldElm.removeEventListener(name, oldListener, false);\n                }\n            }\n        }\n    }\n    // add new listeners which has not already attached\n    if (on) {\n        // reuse existing listener or create new\n        var listener = vnode.listener = oldVnode.listener || createListener();\n        // update vnode for listener\n        listener.vnode = vnode;\n        // if element changed or added we add all needed listeners unconditionally\n        if (!oldOn) {\n            for (name in on) {\n                // add listener if element was changed or new listeners added\n                elm.addEventListener(name, listener, false);\n            }\n        }\n        else {\n            for (name in on) {\n                // add listener if new listener added\n                if (!oldOn[name]) {\n                    elm.addEventListener(name, listener, false);\n                }\n            }\n        }\n    }\n}\nexports.eventListenersModule = {\n    create: updateEventListeners,\n    update: updateEventListeners,\n    destroy: updateEventListeners\n};\nexports.default = exports.eventListenersModule;\n//# sourceMappingURL=eventlisteners.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3J1c3MvcHJvai9yaXYvbm9kZV9tb2R1bGVzL3NuYWJiZG9tL21vZHVsZXMvZXZlbnRsaXN0ZW5lcnMuanM/YWRiZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixvQkFBb0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiI2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5mdW5jdGlvbiBpbnZva2VIYW5kbGVyKGhhbmRsZXIsIHZub2RlLCBldmVudCkge1xuICAgIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIC8vIGNhbGwgZnVuY3Rpb24gaGFuZGxlclxuICAgICAgICBoYW5kbGVyLmNhbGwodm5vZGUsIGV2ZW50LCB2bm9kZSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIC8vIGNhbGwgaGFuZGxlciB3aXRoIGFyZ3VtZW50c1xuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXJbMF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciBzaW5nbGUgYXJndW1lbnQgZm9yIHBlcmZvcm1hbmNlXG4gICAgICAgICAgICBpZiAoaGFuZGxlci5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyWzBdLmNhbGwodm5vZGUsIGhhbmRsZXJbMV0sIGV2ZW50LCB2bm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IGhhbmRsZXIuc2xpY2UoMSk7XG4gICAgICAgICAgICAgICAgYXJncy5wdXNoKGV2ZW50KTtcbiAgICAgICAgICAgICAgICBhcmdzLnB1c2godm5vZGUpO1xuICAgICAgICAgICAgICAgIGhhbmRsZXJbMF0uYXBwbHkodm5vZGUsIGFyZ3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gY2FsbCBtdWx0aXBsZSBoYW5kbGVyc1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBoYW5kbGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlSGFuZGxlcihoYW5kbGVyW2ldLCB2bm9kZSwgZXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gaGFuZGxlRXZlbnQoZXZlbnQsIHZub2RlKSB7XG4gICAgdmFyIG5hbWUgPSBldmVudC50eXBlLCBvbiA9IHZub2RlLmRhdGEub247XG4gICAgLy8gY2FsbCBldmVudCBoYW5kbGVyKHMpIGlmIGV4aXN0c1xuICAgIGlmIChvbiAmJiBvbltuYW1lXSkge1xuICAgICAgICBpbnZva2VIYW5kbGVyKG9uW25hbWVdLCB2bm9kZSwgZXZlbnQpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGNyZWF0ZUxpc3RlbmVyKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBoYW5kbGVyKGV2ZW50KSB7XG4gICAgICAgIGhhbmRsZUV2ZW50KGV2ZW50LCBoYW5kbGVyLnZub2RlKTtcbiAgICB9O1xufVxuZnVuY3Rpb24gdXBkYXRlRXZlbnRMaXN0ZW5lcnMob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiwgb2xkTGlzdGVuZXIgPSBvbGRWbm9kZS5saXN0ZW5lciwgb2xkRWxtID0gb2xkVm5vZGUuZWxtLCBvbiA9IHZub2RlICYmIHZub2RlLmRhdGEub24sIGVsbSA9ICh2bm9kZSAmJiB2bm9kZS5lbG0pLCBuYW1lO1xuICAgIC8vIG9wdGltaXphdGlvbiBmb3IgcmV1c2VkIGltbXV0YWJsZSBoYW5kbGVyc1xuICAgIGlmIChvbGRPbiA9PT0gb24pIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyByZW1vdmUgZXhpc3RpbmcgbGlzdGVuZXJzIHdoaWNoIG5vIGxvbmdlciB1c2VkXG4gICAgaWYgKG9sZE9uICYmIG9sZExpc3RlbmVyKSB7XG4gICAgICAgIC8vIGlmIGVsZW1lbnQgY2hhbmdlZCBvciBkZWxldGVkIHdlIHJlbW92ZSBhbGwgZXhpc3RpbmcgbGlzdGVuZXJzIHVuY29uZGl0aW9uYWxseVxuICAgICAgICBpZiAoIW9uKSB7XG4gICAgICAgICAgICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgbGlzdGVuZXIgaWYgZWxlbWVudCB3YXMgY2hhbmdlZCBvciBleGlzdGluZyBsaXN0ZW5lcnMgcmVtb3ZlZFxuICAgICAgICAgICAgICAgIG9sZEVsbS5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIG9sZExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBmb3IgKG5hbWUgaW4gb2xkT24pIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgbGlzdGVuZXIgaWYgZXhpc3RpbmcgbGlzdGVuZXIgcmVtb3ZlZFxuICAgICAgICAgICAgICAgIGlmICghb25bbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgb2xkRWxtLnJlbW92ZUV2ZW50TGlzdGVuZXIobmFtZSwgb2xkTGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gYWRkIG5ldyBsaXN0ZW5lcnMgd2hpY2ggaGFzIG5vdCBhbHJlYWR5IGF0dGFjaGVkXG4gICAgaWYgKG9uKSB7XG4gICAgICAgIC8vIHJldXNlIGV4aXN0aW5nIGxpc3RlbmVyIG9yIGNyZWF0ZSBuZXdcbiAgICAgICAgdmFyIGxpc3RlbmVyID0gdm5vZGUubGlzdGVuZXIgPSBvbGRWbm9kZS5saXN0ZW5lciB8fCBjcmVhdGVMaXN0ZW5lcigpO1xuICAgICAgICAvLyB1cGRhdGUgdm5vZGUgZm9yIGxpc3RlbmVyXG4gICAgICAgIGxpc3RlbmVyLnZub2RlID0gdm5vZGU7XG4gICAgICAgIC8vIGlmIGVsZW1lbnQgY2hhbmdlZCBvciBhZGRlZCB3ZSBhZGQgYWxsIG5lZWRlZCBsaXN0ZW5lcnMgdW5jb25kaXRpb25hbGx5XG4gICAgICAgIGlmICghb2xkT24pIHtcbiAgICAgICAgICAgIGZvciAobmFtZSBpbiBvbikge1xuICAgICAgICAgICAgICAgIC8vIGFkZCBsaXN0ZW5lciBpZiBlbGVtZW50IHdhcyBjaGFuZ2VkIG9yIG5ldyBsaXN0ZW5lcnMgYWRkZWRcbiAgICAgICAgICAgICAgICBlbG0uYWRkRXZlbnRMaXN0ZW5lcihuYW1lLCBsaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZm9yIChuYW1lIGluIG9uKSB7XG4gICAgICAgICAgICAgICAgLy8gYWRkIGxpc3RlbmVyIGlmIG5ldyBsaXN0ZW5lciBhZGRlZFxuICAgICAgICAgICAgICAgIGlmICghb2xkT25bbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZWxtLmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgbGlzdGVuZXIsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmV2ZW50TGlzdGVuZXJzTW9kdWxlID0ge1xuICAgIGNyZWF0ZTogdXBkYXRlRXZlbnRMaXN0ZW5lcnMsXG4gICAgdXBkYXRlOiB1cGRhdGVFdmVudExpc3RlbmVycyxcbiAgICBkZXN0cm95OiB1cGRhdGVFdmVudExpc3RlbmVyc1xufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGV4cG9ydHMuZXZlbnRMaXN0ZW5lcnNNb2R1bGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudGxpc3RlbmVycy5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vnode_1 = __webpack_require__(8);\nvar is = __webpack_require__(9);\nfunction addNS(data, children, sel) {\n    data.ns = 'http://www.w3.org/2000/svg';\n    if (sel !== 'foreignObject' && children !== undefined) {\n        for (var i = 0; i < children.length; ++i) {\n            var childData = children[i].data;\n            if (childData !== undefined) {\n                addNS(childData, children[i].children, children[i].sel);\n            }\n        }\n    }\n}\nfunction h(sel, b, c) {\n    var data = {}, children, text, i;\n    if (c !== undefined) {\n        data = b;\n        if (is.array(c)) {\n            children = c;\n        }\n        else if (is.primitive(c)) {\n            text = c;\n        }\n        else if (c && c.sel) {\n            children = [c];\n        }\n    }\n    else if (b !== undefined) {\n        if (is.array(b)) {\n            children = b;\n        }\n        else if (is.primitive(b)) {\n            text = b;\n        }\n        else if (b && b.sel) {\n            children = [b];\n        }\n        else {\n            data = b;\n        }\n    }\n    if (children !== undefined) {\n        for (i = 0; i < children.length; ++i) {\n            if (is.primitive(children[i]))\n                children[i] = vnode_1.vnode(undefined, undefined, undefined, children[i], undefined);\n        }\n    }\n    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {\n        addNS(data, children, sel);\n    }\n    return vnode_1.vnode(sel, data, children, text, undefined);\n}\nexports.h = h;\n;\nexports.default = h;\n//# sourceMappingURL=h.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3J1c3MvcHJvai9yaXYvbm9kZV9tb2R1bGVzL3NuYWJiZG9tL2guanM/ZmEzNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE4QyxjQUFjO0FBQzVELGNBQWMsbUJBQU8sQ0FBQyxDQUFTO0FBQy9CLFNBQVMsbUJBQU8sQ0FBQyxDQUFNO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixxQkFBcUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscUJBQXFCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xudmFyIHZub2RlXzEgPSByZXF1aXJlKFwiLi92bm9kZVwiKTtcbnZhciBpcyA9IHJlcXVpcmUoXCIuL2lzXCIpO1xuZnVuY3Rpb24gYWRkTlMoZGF0YSwgY2hpbGRyZW4sIHNlbCkge1xuICAgIGRhdGEubnMgPSAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnO1xuICAgIGlmIChzZWwgIT09ICdmb3JlaWduT2JqZWN0JyAmJiBjaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjaGlsZERhdGEgPSBjaGlsZHJlbltpXS5kYXRhO1xuICAgICAgICAgICAgaWYgKGNoaWxkRGF0YSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgYWRkTlMoY2hpbGREYXRhLCBjaGlsZHJlbltpXS5jaGlsZHJlbiwgY2hpbGRyZW5baV0uc2VsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIGgoc2VsLCBiLCBjKSB7XG4gICAgdmFyIGRhdGEgPSB7fSwgY2hpbGRyZW4sIHRleHQsIGk7XG4gICAgaWYgKGMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkYXRhID0gYjtcbiAgICAgICAgaWYgKGlzLmFycmF5KGMpKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGM7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXMucHJpbWl0aXZlKGMpKSB7XG4gICAgICAgICAgICB0ZXh0ID0gYztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjICYmIGMuc2VsKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtjXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIGlmIChiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKGlzLmFycmF5KGIpKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IGI7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXMucHJpbWl0aXZlKGIpKSB7XG4gICAgICAgICAgICB0ZXh0ID0gYjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChiICYmIGIuc2VsKSB7XG4gICAgICAgICAgICBjaGlsZHJlbiA9IFtiXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRhdGEgPSBiO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjaGlsZHJlbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGlzLnByaW1pdGl2ZShjaGlsZHJlbltpXSkpXG4gICAgICAgICAgICAgICAgY2hpbGRyZW5baV0gPSB2bm9kZV8xLnZub2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNoaWxkcmVuW2ldLCB1bmRlZmluZWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzZWxbMF0gPT09ICdzJyAmJiBzZWxbMV0gPT09ICd2JyAmJiBzZWxbMl0gPT09ICdnJyAmJlxuICAgICAgICAoc2VsLmxlbmd0aCA9PT0gMyB8fCBzZWxbM10gPT09ICcuJyB8fCBzZWxbM10gPT09ICcjJykpIHtcbiAgICAgICAgYWRkTlMoZGF0YSwgY2hpbGRyZW4sIHNlbCk7XG4gICAgfVxuICAgIHJldHVybiB2bm9kZV8xLnZub2RlKHNlbCwgZGF0YSwgY2hpbGRyZW4sIHRleHQsIHVuZGVmaW5lZCk7XG59XG5leHBvcnRzLmggPSBoO1xuO1xuZXhwb3J0cy5kZWZhdWx0ID0gaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWguanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n")},function(module,exports,__webpack_require__){"use strict";eval('\nObject.defineProperty(exports, "__esModule", { value: true });\nfunction vnode(sel, data, children, text, elm) {\n    var key = data === undefined ? undefined : data.key;\n    return { sel: sel, data: data, children: children, text: text, elm: elm, key: key };\n}\nexports.vnode = vnode;\nexports.default = vnode;\n//# sourceMappingURL=vnode.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3J1c3MvcHJvai9yaXYvbm9kZV9tb2R1bGVzL3NuYWJiZG9tL3Zub2RlLmpzPzkyMzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmZ1bmN0aW9uIHZub2RlKHNlbCwgZGF0YSwgY2hpbGRyZW4sIHRleHQsIGVsbSkge1xuICAgIHZhciBrZXkgPSBkYXRhID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBkYXRhLmtleTtcbiAgICByZXR1cm4geyBzZWw6IHNlbCwgZGF0YTogZGF0YSwgY2hpbGRyZW46IGNoaWxkcmVuLCB0ZXh0OiB0ZXh0LCBlbG06IGVsbSwga2V5OiBrZXkgfTtcbn1cbmV4cG9ydHMudm5vZGUgPSB2bm9kZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZub2RlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dm5vZGUuanMubWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.array = Array.isArray;\nfunction primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\nexports.primitive = primitive;\n//# sourceMappingURL=is.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vL1VzZXJzL3J1c3MvcHJvai9yaXYvbm9kZV9tb2R1bGVzL3NuYWJiZG9tL2lzLmpzP2YxYWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBOEMsY0FBYztBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBwcmltaXRpdmUocykge1xuICAgIHJldHVybiB0eXBlb2YgcyA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHMgPT09ICdudW1iZXInO1xufVxuZXhwb3J0cy5wcmltaXRpdmUgPSBwcmltaXRpdmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pcy5qcy5tYXAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "3c7995ba1ebaeb8df6c62360cd2406d1.mp3";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYW1lbl9icmVhay5tcDM/ZTZjOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFBaUIscUJBQXVCIiwiZmlsZSI6IjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiM2M3OTk1YmExZWJhZWI4ZGY2YzYyMzYwY2QyNDA2ZDEubXAzXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, \"h\", function() { return /* reexport */ h; });\n__webpack_require__.d(__webpack_exports__, \"thunk\", function() { return /* reexport */ thunk_thunk; });\n__webpack_require__.d(__webpack_exports__, \"init\", function() { return /* binding */ snabbdom_init; });\n\n// CONCATENATED MODULE: /Users/russ/proj/riv/node_modules/snabbdom/es/vnode.js\nfunction vnode_vnode(sel, data, children, text, elm) {\n    var key = data === undefined ? undefined : data.key;\n    return { sel: sel, data: data, children: children, text: text, elm: elm, key: key };\n}\n/* harmony default export */ var es_vnode = (vnode_vnode);\n//# sourceMappingURL=vnode.js.map\n// CONCATENATED MODULE: /Users/russ/proj/riv/node_modules/snabbdom/es/is.js\nvar array = Array.isArray;\nfunction primitive(s) {\n    return typeof s === 'string' || typeof s === 'number';\n}\n//# sourceMappingURL=is.js.map\n// CONCATENATED MODULE: /Users/russ/proj/riv/node_modules/snabbdom/es/htmldomapi.js\nfunction createElement(tagName) {\n    return document.createElement(tagName);\n}\nfunction createElementNS(namespaceURI, qualifiedName) {\n    return document.createElementNS(namespaceURI, qualifiedName);\n}\nfunction createTextNode(text) {\n    return document.createTextNode(text);\n}\nfunction createComment(text) {\n    return document.createComment(text);\n}\nfunction insertBefore(parentNode, newNode, referenceNode) {\n    parentNode.insertBefore(newNode, referenceNode);\n}\nfunction removeChild(node, child) {\n    node.removeChild(child);\n}\nfunction appendChild(node, child) {\n    node.appendChild(child);\n}\nfunction parentNode(node) {\n    return node.parentNode;\n}\nfunction nextSibling(node) {\n    return node.nextSibling;\n}\nfunction tagName(elm) {\n    return elm.tagName;\n}\nfunction setTextContent(node, text) {\n    node.textContent = text;\n}\nfunction getTextContent(node) {\n    return node.textContent;\n}\nfunction isElement(node) {\n    return node.nodeType === 1;\n}\nfunction isText(node) {\n    return node.nodeType === 3;\n}\nfunction isComment(node) {\n    return node.nodeType === 8;\n}\nvar htmlDomApi = {\n    createElement: createElement,\n    createElementNS: createElementNS,\n    createTextNode: createTextNode,\n    createComment: createComment,\n    insertBefore: insertBefore,\n    removeChild: removeChild,\n    appendChild: appendChild,\n    parentNode: parentNode,\n    nextSibling: nextSibling,\n    tagName: tagName,\n    setTextContent: setTextContent,\n    getTextContent: getTextContent,\n    isElement: isElement,\n    isText: isText,\n    isComment: isComment,\n};\n/* harmony default export */ var htmldomapi = (htmlDomApi);\n//# sourceMappingURL=htmldomapi.js.map\n// CONCATENATED MODULE: /Users/russ/proj/riv/node_modules/snabbdom/es/h.js\n\n\nfunction addNS(data, children, sel) {\n    data.ns = 'http://www.w3.org/2000/svg';\n    if (sel !== 'foreignObject' && children !== undefined) {\n        for (var i = 0; i < children.length; ++i) {\n            var childData = children[i].data;\n            if (childData !== undefined) {\n                addNS(childData, children[i].children, children[i].sel);\n            }\n        }\n    }\n}\nfunction h(sel, b, c) {\n    var data = {}, children, text, i;\n    if (c !== undefined) {\n        data = b;\n        if (array(c)) {\n            children = c;\n        }\n        else if (primitive(c)) {\n            text = c;\n        }\n        else if (c && c.sel) {\n            children = [c];\n        }\n    }\n    else if (b !== undefined) {\n        if (array(b)) {\n            children = b;\n        }\n        else if (primitive(b)) {\n            text = b;\n        }\n        else if (b && b.sel) {\n            children = [b];\n        }\n        else {\n            data = b;\n        }\n    }\n    if (children !== undefined) {\n        for (i = 0; i < children.length; ++i) {\n            if (primitive(children[i]))\n                children[i] = vnode_vnode(undefined, undefined, undefined, children[i], undefined);\n        }\n    }\n    if (sel[0] === 's' && sel[1] === 'v' && sel[2] === 'g' &&\n        (sel.length === 3 || sel[3] === '.' || sel[3] === '#')) {\n        addNS(data, children, sel);\n    }\n    return vnode_vnode(sel, data, children, text, undefined);\n}\n;\n/* harmony default export */ var es_h = (h);\n//# sourceMappingURL=h.js.map\n// CONCATENATED MODULE: /Users/russ/proj/riv/node_modules/snabbdom/es/thunk.js\n\nfunction copyToThunk(vnode, thunk) {\n    thunk.elm = vnode.elm;\n    vnode.data.fn = thunk.data.fn;\n    vnode.data.args = thunk.data.args;\n    thunk.data = vnode.data;\n    thunk.children = vnode.children;\n    thunk.text = vnode.text;\n    thunk.elm = vnode.elm;\n}\nfunction init(thunk) {\n    var cur = thunk.data;\n    var vnode = cur.fn.apply(undefined, cur.args);\n    copyToThunk(vnode, thunk);\n}\nfunction prepatch(oldVnode, thunk) {\n    var i, old = oldVnode.data, cur = thunk.data;\n    var oldArgs = old.args, args = cur.args;\n    if (old.fn !== cur.fn || oldArgs.length !== args.length) {\n        copyToThunk(cur.fn.apply(undefined, args), thunk);\n        return;\n    }\n    for (i = 0; i < args.length; ++i) {\n        if (oldArgs[i] !== args[i]) {\n            copyToThunk(cur.fn.apply(undefined, args), thunk);\n            return;\n        }\n    }\n    copyToThunk(oldVnode, thunk);\n}\nvar thunk_thunk = function thunk(sel, key, fn, args) {\n    if (args === undefined) {\n        args = fn;\n        fn = key;\n        key = undefined;\n    }\n    return h(sel, {\n        key: key,\n        hook: { init: init, prepatch: prepatch },\n        fn: fn,\n        args: args\n    });\n};\n/* harmony default export */ var es_thunk = (thunk_thunk);\n//# sourceMappingURL=thunk.js.map\n// CONCATENATED MODULE: /Users/russ/proj/riv/node_modules/snabbdom/es/snabbdom.js\n\n\n\nfunction isUndef(s) { return s === undefined; }\nfunction isDef(s) { return s !== undefined; }\nvar emptyNode = es_vnode('', {}, [], undefined, undefined);\nfunction sameVnode(vnode1, vnode2) {\n    return vnode1.key === vnode2.key && vnode1.sel === vnode2.sel;\n}\nfunction isVnode(vnode) {\n    return vnode.sel !== undefined;\n}\nfunction createKeyToOldIdx(children, beginIdx, endIdx) {\n    var i, map = {}, key, ch;\n    for (i = beginIdx; i <= endIdx; ++i) {\n        ch = children[i];\n        if (ch != null) {\n            key = ch.key;\n            if (key !== undefined)\n                map[key] = i;\n        }\n    }\n    return map;\n}\nvar hooks = ['create', 'update', 'remove', 'destroy', 'pre', 'post'];\n\n\nfunction snabbdom_init(modules, domApi) {\n    var i, j, cbs = {};\n    var api = domApi !== undefined ? domApi : htmldomapi;\n    for (i = 0; i < hooks.length; ++i) {\n        cbs[hooks[i]] = [];\n        for (j = 0; j < modules.length; ++j) {\n            var hook = modules[j][hooks[i]];\n            if (hook !== undefined) {\n                cbs[hooks[i]].push(hook);\n            }\n        }\n    }\n    function emptyNodeAt(elm) {\n        var id = elm.id ? '#' + elm.id : '';\n        var c = elm.className ? '.' + elm.className.split(' ').join('.') : '';\n        return es_vnode(api.tagName(elm).toLowerCase() + id + c, {}, [], undefined, elm);\n    }\n    function createRmCb(childElm, listeners) {\n        return function rmCb() {\n            if (--listeners === 0) {\n                var parent_1 = api.parentNode(childElm);\n                api.removeChild(parent_1, childElm);\n            }\n        };\n    }\n    function createElm(vnode, insertedVnodeQueue) {\n        var i, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.init)) {\n                i(vnode);\n                data = vnode.data;\n            }\n        }\n        var children = vnode.children, sel = vnode.sel;\n        if (sel === '!') {\n            if (isUndef(vnode.text)) {\n                vnode.text = '';\n            }\n            vnode.elm = api.createComment(vnode.text);\n        }\n        else if (sel !== undefined) {\n            // Parse selector\n            var hashIdx = sel.indexOf('#');\n            var dotIdx = sel.indexOf('.', hashIdx);\n            var hash = hashIdx > 0 ? hashIdx : sel.length;\n            var dot = dotIdx > 0 ? dotIdx : sel.length;\n            var tag = hashIdx !== -1 || dotIdx !== -1 ? sel.slice(0, Math.min(hash, dot)) : sel;\n            var elm = vnode.elm = isDef(data) && isDef(i = data.ns) ? api.createElementNS(i, tag)\n                : api.createElement(tag);\n            if (hash < dot)\n                elm.setAttribute('id', sel.slice(hash + 1, dot));\n            if (dotIdx > 0)\n                elm.setAttribute('class', sel.slice(dot + 1).replace(/\\./g, ' '));\n            for (i = 0; i < cbs.create.length; ++i)\n                cbs.create[i](emptyNode, vnode);\n            if (array(children)) {\n                for (i = 0; i < children.length; ++i) {\n                    var ch = children[i];\n                    if (ch != null) {\n                        api.appendChild(elm, createElm(ch, insertedVnodeQueue));\n                    }\n                }\n            }\n            else if (primitive(vnode.text)) {\n                api.appendChild(elm, api.createTextNode(vnode.text));\n            }\n            i = vnode.data.hook; // Reuse variable\n            if (isDef(i)) {\n                if (i.create)\n                    i.create(emptyNode, vnode);\n                if (i.insert)\n                    insertedVnodeQueue.push(vnode);\n            }\n        }\n        else {\n            vnode.elm = api.createTextNode(vnode.text);\n        }\n        return vnode.elm;\n    }\n    function addVnodes(parentElm, before, vnodes, startIdx, endIdx, insertedVnodeQueue) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var ch = vnodes[startIdx];\n            if (ch != null) {\n                api.insertBefore(parentElm, createElm(ch, insertedVnodeQueue), before);\n            }\n        }\n    }\n    function invokeDestroyHook(vnode) {\n        var i, j, data = vnode.data;\n        if (data !== undefined) {\n            if (isDef(i = data.hook) && isDef(i = i.destroy))\n                i(vnode);\n            for (i = 0; i < cbs.destroy.length; ++i)\n                cbs.destroy[i](vnode);\n            if (vnode.children !== undefined) {\n                for (j = 0; j < vnode.children.length; ++j) {\n                    i = vnode.children[j];\n                    if (i != null && typeof i !== \"string\") {\n                        invokeDestroyHook(i);\n                    }\n                }\n            }\n        }\n    }\n    function removeVnodes(parentElm, vnodes, startIdx, endIdx) {\n        for (; startIdx <= endIdx; ++startIdx) {\n            var i_1 = void 0, listeners = void 0, rm = void 0, ch = vnodes[startIdx];\n            if (ch != null) {\n                if (isDef(ch.sel)) {\n                    invokeDestroyHook(ch);\n                    listeners = cbs.remove.length + 1;\n                    rm = createRmCb(ch.elm, listeners);\n                    for (i_1 = 0; i_1 < cbs.remove.length; ++i_1)\n                        cbs.remove[i_1](ch, rm);\n                    if (isDef(i_1 = ch.data) && isDef(i_1 = i_1.hook) && isDef(i_1 = i_1.remove)) {\n                        i_1(ch, rm);\n                    }\n                    else {\n                        rm();\n                    }\n                }\n                else { // Text node\n                    api.removeChild(parentElm, ch.elm);\n                }\n            }\n        }\n    }\n    function updateChildren(parentElm, oldCh, newCh, insertedVnodeQueue) {\n        var oldStartIdx = 0, newStartIdx = 0;\n        var oldEndIdx = oldCh.length - 1;\n        var oldStartVnode = oldCh[0];\n        var oldEndVnode = oldCh[oldEndIdx];\n        var newEndIdx = newCh.length - 1;\n        var newStartVnode = newCh[0];\n        var newEndVnode = newCh[newEndIdx];\n        var oldKeyToIdx;\n        var idxInOld;\n        var elmToMove;\n        var before;\n        while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n            if (oldStartVnode == null) {\n                oldStartVnode = oldCh[++oldStartIdx]; // Vnode might have been moved left\n            }\n            else if (oldEndVnode == null) {\n                oldEndVnode = oldCh[--oldEndIdx];\n            }\n            else if (newStartVnode == null) {\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (newEndVnode == null) {\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newStartVnode)) {\n                patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue);\n                oldStartVnode = oldCh[++oldStartIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else if (sameVnode(oldEndVnode, newEndVnode)) {\n                patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right\n                patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldStartVnode.elm, api.nextSibling(oldEndVnode.elm));\n                oldStartVnode = oldCh[++oldStartIdx];\n                newEndVnode = newCh[--newEndIdx];\n            }\n            else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left\n                patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue);\n                api.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);\n                oldEndVnode = oldCh[--oldEndIdx];\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                if (oldKeyToIdx === undefined) {\n                    oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx);\n                }\n                idxInOld = oldKeyToIdx[newStartVnode.key];\n                if (isUndef(idxInOld)) { // New element\n                    api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    newStartVnode = newCh[++newStartIdx];\n                }\n                else {\n                    elmToMove = oldCh[idxInOld];\n                    if (elmToMove.sel !== newStartVnode.sel) {\n                        api.insertBefore(parentElm, createElm(newStartVnode, insertedVnodeQueue), oldStartVnode.elm);\n                    }\n                    else {\n                        patchVnode(elmToMove, newStartVnode, insertedVnodeQueue);\n                        oldCh[idxInOld] = undefined;\n                        api.insertBefore(parentElm, elmToMove.elm, oldStartVnode.elm);\n                    }\n                    newStartVnode = newCh[++newStartIdx];\n                }\n            }\n        }\n        if (oldStartIdx <= oldEndIdx || newStartIdx <= newEndIdx) {\n            if (oldStartIdx > oldEndIdx) {\n                before = newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].elm;\n                addVnodes(parentElm, before, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);\n            }\n            else {\n                removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);\n            }\n        }\n    }\n    function patchVnode(oldVnode, vnode, insertedVnodeQueue) {\n        var i, hook;\n        if (isDef(i = vnode.data) && isDef(hook = i.hook) && isDef(i = hook.prepatch)) {\n            i(oldVnode, vnode);\n        }\n        var elm = vnode.elm = oldVnode.elm;\n        var oldCh = oldVnode.children;\n        var ch = vnode.children;\n        if (oldVnode === vnode)\n            return;\n        if (vnode.data !== undefined) {\n            for (i = 0; i < cbs.update.length; ++i)\n                cbs.update[i](oldVnode, vnode);\n            i = vnode.data.hook;\n            if (isDef(i) && isDef(i = i.update))\n                i(oldVnode, vnode);\n        }\n        if (isUndef(vnode.text)) {\n            if (isDef(oldCh) && isDef(ch)) {\n                if (oldCh !== ch)\n                    updateChildren(elm, oldCh, ch, insertedVnodeQueue);\n            }\n            else if (isDef(ch)) {\n                if (isDef(oldVnode.text))\n                    api.setTextContent(elm, '');\n                addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);\n            }\n            else if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            else if (isDef(oldVnode.text)) {\n                api.setTextContent(elm, '');\n            }\n        }\n        else if (oldVnode.text !== vnode.text) {\n            if (isDef(oldCh)) {\n                removeVnodes(elm, oldCh, 0, oldCh.length - 1);\n            }\n            api.setTextContent(elm, vnode.text);\n        }\n        if (isDef(hook) && isDef(i = hook.postpatch)) {\n            i(oldVnode, vnode);\n        }\n    }\n    return function patch(oldVnode, vnode) {\n        var i, elm, parent;\n        var insertedVnodeQueue = [];\n        for (i = 0; i < cbs.pre.length; ++i)\n            cbs.pre[i]();\n        if (!isVnode(oldVnode)) {\n            oldVnode = emptyNodeAt(oldVnode);\n        }\n        if (sameVnode(oldVnode, vnode)) {\n            patchVnode(oldVnode, vnode, insertedVnodeQueue);\n        }\n        else {\n            elm = oldVnode.elm;\n            parent = api.parentNode(elm);\n            createElm(vnode, insertedVnodeQueue);\n            if (parent !== null) {\n                api.insertBefore(parent, vnode.elm, api.nextSibling(elm));\n                removeVnodes(parent, [oldVnode], 0, 0);\n            }\n        }\n        for (i = 0; i < insertedVnodeQueue.length; ++i) {\n            insertedVnodeQueue[i].data.hook.insert(insertedVnodeQueue[i]);\n        }\n        for (i = 0; i < cbs.post.length; ++i)\n            cbs.post[i]();\n        return vnode;\n    };\n}\n//# sourceMappingURL=snabbdom.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ../riv-runtime/lib/index.js\nvar lib = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/programs.js\nconst {\n  useReducer,\n  useCallbackReducer,\n  useCallbackReducers,\n  useMachine\n} = __webpack_require__(0);\n\nconst {\n  showString,\n  animationTime,\n  countEvents,\n  mouseClickEvts,\n  mouseDown,\n  random,\n  audioDriver,\n  streamMap,\n  everySecond,\n  redCircle,\n  mousePosition,\n  followAtSpeed2d,\n  received,\n  eventAfter,\n  animationFrameEvts,\n  loadAudioAsArray,\n  expFollow,\n  integral,\n  sampleUpon\n} = __webpack_require__(2);\n\nconst {\n  renderDOMIntoSelector,\n  h\n} = __webpack_require__(1);\n\nconst amen_break_url = __webpack_require__(10);\n\n/* harmony default export */ var programs = ([{\n  name: 'do nothing',\n  main: () => {}\n}, {\n  name: 'animation time',\n  main: () => {\n    showString(animationTime().toFixed(3));\n  }\n}, {\n  name: 'count clicks',\n  main: () => {\n    showString(countEvents(mouseClickEvts()));\n  }\n}, {\n  name: 'is mouse button down',\n  main: () => {\n    showString(mouseDown());\n  }\n}, {\n  name: 'random number, click to repick',\n  main: () => {\n    showString(random(mouseClickEvts()));\n  }\n}, {\n  name: 'audio noise when mouse is down',\n  main: () => {\n    const md = mouseDown();\n    audioDriver((audioTime, advanceFrameEvts) => {\n      const noise = random(advanceFrameEvts) - 0.5;\n      return md ? noise : 0;\n    });\n  }\n}, {\n  name: 'decaying noise upon click',\n  main: () => {\n    const clickEvts = mouseClickEvts();\n    audioDriver((audioTime, advanceFrameEvts) => {\n      const noise = random(advanceFrameEvts) - 0.5;\n      const lastClickTime = sampleUpon(audioTime, clickEvts, -Infinity);\n      const decayingGain = Math.exp(5 * (lastClickTime - audioTime));\n      return decayingGain * noise;\n    });\n  }\n}, {\n  name: 'dynamic array of async clocks, click to add',\n  main: () => {\n    const count = countEvents(mouseClickEvts());\n\n    const clock = () => countEvents(everySecond());\n\n    const nums = streamMap(clock, Array(count));\n    showString(nums.join(' '));\n  }\n}, {\n  name: 'record player spin up/down, hold mouse down and release',\n  main: () => {\n    const pcm = loadAudioAsArray(amen_break_url);\n    showString(pcm.length > 1 ? 'loaded audio' : 'loading audio...');\n    audioDriver((audioTime, advanceFrameEvts, sampleRate) => {\n      const targetSpeed = mouseDown() ? sampleRate : 0;\n      const speed = expFollow(targetSpeed, 3, audioTime, 0);\n      const pos = Math.floor(integral(() => speed, audioTime));\n      return pcm[pos % pcm.length]; // modulo so as to loop\n    });\n  }\n}, {\n  name: 'circle follows mouse',\n  main: () => {\n    redCircle(mousePosition());\n  }\n}, {\n  name: 'circle follows mouse at limited speed',\n  main: () => {\n    const time = animationTime();\n    const mpos = mousePosition();\n    redCircle(followAtSpeed2d(mpos, 300, time, mpos));\n  }\n}, {\n  name: 'circle moves halfway to mouse with each click',\n  main: () => {\n    const midpoint = (a, b) => ({\n      x: 0.5 * (a.x + b.x),\n      y: 0.5 * (a.y + b.y)\n    });\n\n    const mpos = mousePosition();\n    const clickEvts = mouseClickEvts();\n    const cpos = useReducer(clickEvts, prevState => midpoint(prevState, mpos), {\n      x: 0,\n      y: 0\n    });\n    redCircle(cpos);\n  }\n}, {\n  name: 'roaming circle (state machine)',\n  main: () => {\n    const time = animationTime();\n    const position = useMachine({\n      moving: initialPosition => {\n        const targetPosition = {\n          x: 500 * random(),\n          y: 500 * random()\n        };\n        const position = followAtSpeed2d(targetPosition, 300, time, initialPosition);\n        const arrived = position.x === targetPosition.x && position.y === targetPosition.y;\n        return [position, arrived ? ['resting', position] : null];\n      },\n      resting: initialPosition => {\n        return [initialPosition, received(eventAfter(random())) ? ['moving', initialPosition] : null];\n      }\n    }, ['moving', {\n      x: 0,\n      y: 0\n    }]);\n    redCircle(position);\n  }\n}, {\n  name: 'resetting frame counter, click to reset',\n  main: () => {\n    const frameEvts = animationFrameEvts();\n    const clickEvt = mouseClickEvts(); // We use a single-state state machine to achieve reseting behavior\n\n    const count = useMachine({\n      single: () => {\n        return [countEvents(frameEvts), received(clickEvt) ? ['single'] : null];\n      }\n    }, ['single']);\n    showString(count);\n  }\n},\n/* ALTERNATE JSX VERSION FOR BELOW\n  const vnode = (\n    <div>\n      <span>{label} {value}{unit}</span>\n      <input type=\"range\" min={min} max={max} value={value} on-input={inputCallback} />\n    </div>\n  );\n*/\n{\n  name: 'BMI calculator (DOM)',\n  main: () => {\n    // Based off https://jsbin.com/seqehat/2/edit?js,output for comparison\n    const LabeledSlider = (label, unit, min, initialValue, max) => {\n      const [value, inputCallback] = useCallbackReducer((previousValue, e) => e.target.value, initialValue);\n      const vnode = h('div', [h('span', label + ' ' + value + unit), h('input', {\n        attrs: {\n          type: 'range',\n          min,\n          max,\n          value\n        },\n        on: {\n          input: inputCallback\n        }\n      })]);\n      return [vnode, value];\n    };\n\n    const [weightNode, weight] = LabeledSlider('Weight', 'kg', 40, 70, 150);\n    const [heightNode, height] = LabeledSlider('Height', 'cm', 140, 170, 210);\n    const heightMeters = 0.01 * height;\n    const bmi = Math.round(weight / (heightMeters * heightMeters));\n    const uiNode = h('div', [weightNode, heightNode, h('h2', 'BMI is ' + bmi)]);\n    renderDOMIntoSelector(uiNode, '#output');\n  }\n}, {\n  name: 'sum of a dynamic list of sliders',\n  main: () => {\n    const slider = () => {\n      const [value, inputCallback] = useCallbackReducer((prevState, e) => +e.target.value, 0);\n      const vnode = h('div', [h('input', {\n        attrs: {\n          type: 'range',\n          min: 0,\n          max: 10,\n          value\n        },\n        on: {\n          input: inputCallback\n        }\n      })]);\n      return [vnode, value];\n    };\n\n    const [count, [incCallback, decCallback]] = useCallbackReducers([n => n + 1, n => n > 0 ? n - 1 : n], 5);\n    const sliders = streamMap(slider, Array(count));\n    const total = sliders.map(s => s[1]).reduce((a, b) => a + b, 0);\n    const uiNode = h('div', [h('div', sliders.map(s => s[0])), h('div', 'Total: ' + total), h('div', [h('button', {\n      on: {\n        click: incCallback\n      }\n    }, 'Add Slider'), h('button', {\n      on: {\n        click: decCallback\n      }\n    }, 'Remove Slider')])]);\n    renderDOMIntoSelector(uiNode, '#output');\n  }\n}]);\n// CONCATENATED MODULE: ./src/index.js\n\n\nconst programListElem = document.getElementById('program-list');\nconst programSourceElem = document.getElementById('program-source');\nlet currentContext; // NOTE: This is a hack but works for now\n\nconst fixIndent = code => {\n  return code.split('\\n').map((line, idx) => idx === 0 ? line : line.substr(2)).join('\\n');\n};\n\nconst startProgram = program => {\n  if (currentContext) {\n    currentContext.terminate();\n    currentContext = undefined;\n  }\n\n  programSourceElem.textContent = fixIndent(program.main.toString()); // hacky but works for now\n\n  currentContext = Object(lib[\"createNullaryVoidRootExecutionContext\"])(program.main);\n  currentContext.update(); // do initial update. any further updates will be async\n};\n\nfor (const prog of programs) {\n  const anchorElem = document.createElement('a');\n  anchorElem.textContent = prog.name;\n  anchorElem.setAttribute('href', '#');\n\n  (() => {\n    anchorElem.addEventListener('click', e => {\n      e.preventDefault();\n      setTimeout(() => {\n        // start program with delay so it doesn't get this click event\n        startProgram(prog);\n      }, 0);\n    });\n  })();\n\n  const itemElem = document.createElement('li');\n  itemElem.appendChild(anchorElem);\n  programListElem.appendChild(itemElem);\n}\n\nstartProgram(programs[0]);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n")}]);